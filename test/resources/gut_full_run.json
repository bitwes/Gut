{
 "test_scripts": {
  "props": {
   "errors": 15,
   "failures": 15,
   "orphans": 150,
   "passing": 1109,
   "pending": 16,
   "tests": 1138,
   "time": 111.629,
   "warnings": 25
  },
  "scripts": {
   "res://test/integration/test_doubler_and_spy.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/integration/test_doubler_and_spy.gd.TestBoth": {
    "props": {
     "failures": 0,
     "pending": 1,
     "tests": 9
    },
    "tests": {
     "test_can_spy_on_built_ins_when_doing_a_full_double": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "added first signal",
       "second signal added"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_spy_on_init": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_spy_on_init_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_spy_on_native_doubles": {
      "failing": [

      ],
      "orphans": 2,
      "passing": [
       "",
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_spy_on_singleton_doubles": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [
       "No singleton doubling"
      ],
      "status": "pending"
     },
     "test_it_works_with_two_parameters_too": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "should not match",
       "should match"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_spy_is_set_in_metadata": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[<RefCounted#-9223371956944893053>(spy.gd)] expected to equal [<RefCounted#-9223371956944893053>(spy.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_doubled_method_called_it_sends_parameters": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_doubled_method_called_spy_sees_it": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/integration/test_doubler_and_stubber.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/integration/test_doubler_and_stubber.gd.TestDefaultParameters": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 4
    },
    "tests": {
     "test_default_values_are_set_in_stubber": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"s\"] expected to equal [\"s\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_partial_gets_all_values_passed": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"foobar\"] expected to equal [\"foobar\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_partial_gets_deault_values": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"ab\"] expected to equal [\"ab\"]:  the defauts are a and b"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_partial_gets_passed_values_and_defaults": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"foob\"] expected to equal [\"foob\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/integration/test_doubler_and_stubber.gd.TestInnerClasses": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 1
    },
    "tests": {
     "test_can_stub_inner_using_loaded_inner_class": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[5] expected to equal [5]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/integration/test_doubler_and_stubber.gd.TestTheBasics": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 19
    },
    "tests": {
     "test_can_stub_all_Node2D_doubles": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[-1] expected to equal [-1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_stub_doubled_instance_values": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[10] expected to equal [10]:  instantiate gets right value",
       "[5] expected to equal [5]:  other instantiate gets class value"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_stub_doubled_scenes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"world\"] expected to equal [\"world\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_stub_native_methods": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[-1] expected to equal [-1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_stub_non_local_methods": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Vector2(11, 11)] expected to equal [Vector2(11, 11)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_double_can_have_default_param_values_stubbed": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"override_default\"] expected to equal [\"override_default\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_double_can_have_default_param_values_stubbed_after_double_created": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"override_default\"] expected to equal [\"override_default\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_init_is_never_stubbed_to_call_super": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_partial_double_of_Node2D_returns_super_values": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[false] expected to equal [false]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_ready_is_never_stubbed_to_call_super": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_stub_with_nothing_works_with_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[5] expected to equal [5]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_stubbed_methods_send_parameters_in_callback": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[10] expected to equal [10]:  ",
       "[<null>] expected to equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_stubbing_init_to_call_super_does_not_generate_stub": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_stubbing_init_to_call_super_generates_error": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_stubbing_method_returns_expected_value": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<Node#155625459482>(double of double_me.gd)] to extend [<GDScript#-9223371958706500759>]: it is a DoubleMe",
       "[7] expected to equal [7]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_stubbing_return_value_of_init_results_in_error": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<null>] expected to equal [<null>]:  return value",
       "[1] expected to equal [1]:  error generated"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_non_local_methods_not_stubbed_super_is_returned": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_stubbed_to_call_super_then_super_is_called": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[99] expected to equal [99]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_you_cannot_stub_init_to_do_nothing": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "stub not created",
       "[1] expected to equal [1]:  error generated"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/integration/test_everything_together.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/integration/test_everything_together.gd.TestLogging": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 7
    },
    "tests": {
     "test_gut_sets_doublers_logger": {
      "failing": [

      ],
      "orphans": 2,
      "passing": [
       "[<RefCounted#-9223371693743927050>(logger.gd)] expected to equal [<RefCounted#-9223371693743927050>(logger.gd)]:  Doubler logger",
       "[<RefCounted#-9223371693743927050>(logger.gd)] expected to equal [<RefCounted#-9223371693743927050>(logger.gd)]:  MethodMaker logger"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_gut_sets_logger_on_spy": {
      "failing": [

      ],
      "orphans": 2,
      "passing": [
       "[<RefCounted#-9223371689767726787>(logger.gd)] expected to equal [<RefCounted#-9223371689767726787>(logger.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_gut_sets_logger_on_test_collector": {
      "failing": [

      ],
      "orphans": 2,
      "passing": [
       "[<RefCounted#-9223371690707250908>(logger.gd)] expected to equal [<RefCounted#-9223371690707250908>(logger.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_gut_sets_logger_on_tests": {
      "failing": [

      ],
      "orphans": 2,
      "passing": [
       "[<RefCounted#-9223371999659686597>(logger.gd)] expected to equal [<RefCounted#-9223371999659686597>(logger.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_gut_sets_stubber_logger": {
      "failing": [

      ],
      "orphans": 2,
      "passing": [
       "[<RefCounted#-9223371692586299133>(logger.gd)] expected to equal [<RefCounted#-9223371692586299133>(logger.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_method_maker_has_same_logger": {
      "failing": [

      ],
      "orphans": 2,
      "passing": [
       "[<RefCounted#-9223371688828202666>(logger.gd)] expected to equal [<RefCounted#-9223371688828202666>(logger.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_test_colledtor_has_same_logger": {
      "failing": [

      ],
      "orphans": 2,
      "passing": [
       "[<RefCounted#-9223371687888678545>(logger.gd)] expected to equal [<RefCounted#-9223371687888678545>(logger.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/integration/test_gut_and_spy.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 2
    },
    "tests": {
     "test_can_get_spy": {
      "failing": [

      ],
      "orphans": 2,
      "passing": [
       "[<RefCounted#-9223371686009630258>(spy.gd)] expected to not equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_spy_for_doubler_is_guts_spy": {
      "failing": [

      ],
      "orphans": 2,
      "passing": [
       "[<RefCounted#-9223371685070106137>(spy.gd)] expected to equal [<RefCounted#-9223371685070106137>(spy.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/integration/test_gut_and_spy.gd.TestGutClearsSpyBetweenTests": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 2
    },
    "tests": {
     "test_spy_cleared_between_tests": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_spy_cleared_between_tests_setup": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/integration/test_gut_and_stubber.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 6
    },
    "tests": {
     "test_can_get_doubler": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[<RefCounted#-9223371682486414795>(doubler.gd)] expected to not equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_get_stubber": {
      "failing": [

      ],
      "orphans": 2,
      "passing": [
       "[<RefCounted#-9223371683761483249>(stubber.gd)] expected to not equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_doublers_stubber_is_guts_stubber": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[<RefCounted#-9223371681664331211>(stubber.gd)] expected to equal [<RefCounted#-9223371681664331211>(stubber.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_scene_and_script_are_the_same_when_stubbing_resource": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"script\"] expected to equal [\"script\"]:  ",
       "[\"script\"] expected to equal [\"script\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_stubber_cleared_between_tests": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<null>] expected to equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_stubber_cleared_between_tests_setup": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [

      ],
      "status": "no asserts"
     }
    }
   },
   "res://test/integration/test_gut_import_export.gd": {
    "props": {
     "failures": 2,
     "pending": 0,
     "tests": 7
    },
    "tests": {
     "test_export_test_exports_tests": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "expected [res://test/exported_tests.cfg] to contain data"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_export_uses_export_path_if_no_path_sent": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "expected [res://test/exported_tests.cfg] to contain data"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_gut_runs_the_imported_tests": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[6] expected to equal [6]:  ",
       "[16] expected to be > than [10]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_if_export_path_not_set_and_no_path_passed_error_is_generated": {
      "failing": [
       "Does not have get_logger method\n      at line 29"
      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [

      ],
      "status": "fail"
     },
     "test_import_errors_if_file_does_not_exist": {
      "failing": [
       "Does not have get_logger method\n      at line 58"
      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [

      ],
      "status": "fail"
     },
     "test_import_tests_uses_export_path_by_default": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[13] expected to equal [13]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_importing_tests_populates_test_collector": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[13] expected to equal [13]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/integration/test_gut_integration.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/integration/test_gut_integration.gd.TestOutputWhenRunDirectly": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 1
    },
    "tests": {
     "test_one": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"set\"] expected to equal [\"set\"]:  before all value",
       "[\"set\"] expected to equal [\"set\"]:  before each value"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/integration/test_gut_integration.gd.TestYieldInBeforeAfterMethods": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 4
    },
    "tests": {
     "test_gut_waits_for_yield_in_after_all": {
      "failing": [

      ],
      "orphans": 5,
      "passing": [
       "[\"set\"] expected to equal [\"set\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_gut_waits_for_yield_in_after_each": {
      "failing": [

      ],
      "orphans": 5,
      "passing": [
       "[1] expected to equal [1]:  Pass count does not match",
       "[1] expected to equal [1]:  Failing count does not match"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_gut_waits_for_yield_in_before_all": {
      "failing": [

      ],
      "orphans": 5,
      "passing": [
       "[1] expected to equal [1]:  Pass count does not match",
       "[0] expected to equal [0]:  Failing count does not match"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_gut_waits_for_yield_in_before_each": {
      "failing": [

      ],
      "orphans": 5,
      "passing": [
       "[1] expected to equal [1]:  Pass count does not match",
       "[0] expected to equal [0]:  Failing count does not match"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/integration/test_sample_all_passed_integration.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 3
    },
    "tests": {
     "test_3": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"one\"] expected to not equal [\"two\"]:  This is yet again true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_two": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"two\"] expected to equal [\"two\"]:  This is also true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_works": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "This is true"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/integration/test_test_stubber_doubler.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/integration/test_test_stubber_doubler.gd.TestBasics": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 13
    },
    "tests": {
     "test_basic_double_and_stub": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[10] expected to equal [10]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_override_strategy_when_doubling_scene": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_stub_inner_class_methods": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[10] expected to equal [10]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_stub_multiple_inner_classes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[10] expected to equal [10]:  ",
       "[20] expected to equal [20]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_stub_multiple_inners_using_class_path_and_inner_names": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[10] expected to equal [10]:  InnerA should be stubbed",
       "[<null>] expected to equal [<null>]:  AnotherA should NOT be stubbed"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_double_returns_a_class": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[<Node#451558773589>(double of double_me.gd)] expected to not equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_double_sets_stubber_for_doubled_class": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[<RefCounted#-9223371585027566218>(stubber.gd)] expected to equal [<RefCounted#-9223371585027566218>(stubber.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_set_double_strat": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "@@106:<Node#463302825031>(test.gd) should have getter starting with get_ or is_",
       "@@106:<Node#463302825031>(test.gd) should have method: set_double_strategy",
       "[0] expected to equal [0]:  It should have the expected default value.",
       "[1] expected to equal [1]:  The set value should have been returned."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_strategy_is_full_then_supers_are_spied": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_strategy_is_partial_then_supers_are_NOT_spied_in_scenes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_strategy_is_partial_then_supers_are_NOT_spied_in_scripts": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_stub_passed_a_non_doubled_instance_it_generates_an_error": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_stub_passed_singleton_it_generates_error": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/integration/test_test_stubber_doubler.gd.TestIgnoreMethodsWhenDoubling": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 3
    },
    "tests": {
     "test_sends_loaded_scene_to_the_doubler": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [add_ignored_method] to have been called on <RefCounted#-9223371483877730505>(double of doubler.gd)"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_sends_loaded_script_to_the_doubler": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [add_ignored_method] to have been called on <RefCounted#-9223371492635437349>(double of doubler.gd)"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_ignoring_scene_methods_they_are_not_doubled": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/integration/test_test_stubber_doubler.gd.TestOverridingParameters": {
    "props": {
     "failures": 0,
     "pending": 3,
     "tests": 6
    },
    "tests": {
     "test_can_stub_default_values": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"12\"] expected to equal [\"12\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_double_can_have_default_param_values_stubbed_using_class": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"override_default\"] expected to equal [\"override_default\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_issue_246_rpc_id_varargs2_skip__": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [
       "SKIPPED because it ends with _skip__"
      ],
      "status": "pending"
     },
     "test_issue_246_rpc_id_varargs_skip__": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [
       "SKIPPED because it ends with _skip__"
      ],
      "status": "pending"
     },
     "test_issue_246_rpc_id_varargs_with_defaults_skip__": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [
       "SKIPPED because it ends with _skip__"
      ],
      "status": "pending"
     },
     "test_setting_less_parameters_does_not_affect_anything": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"ab\"] expected to equal [\"ab\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/integration/test_test_stubber_doubler.gd.TestPartialDoubleMethod": {
    "props": {
     "failures": 0,
     "pending": 1,
     "tests": 11
    },
    "tests": {
     "test_can_double_file_skip__": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [
       "SKIPPED because it ends with _skip__"
      ],
      "status": "pending"
     },
     "test_can_spy_on_partial_doubled_native_class": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[3] expected to equal [3]:  tests have passed"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_spy_on_partial_doubles": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[2] expected to equal [2]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_stub_partial_doubled_native_class": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[-1] expected to equal [-1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_double_inner_not_a_partial": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<null>] expected to equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_double_scene_not_a_partial": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<null>] expected to equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_double_script_not_a_partial": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[<null>] expected to equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_partial_double_inner": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"a\"] expected to equal [\"a\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_partial_double_scene": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"hello\"] expected to equal [\"hello\"]:  sometimes fails, should be fixed."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_partial_double_script": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[10] expected to equal [10]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_an_instance_is_passed_null_is_returned_and_an_error_is_generated": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<null>] to be NULL:  double is null",
       "[1] expected to equal [1]:  generates error"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/integration/test_test_stubber_doubler.gd.TestTestsSmartDoubleMethod": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 10
    },
    "tests": {
     "test_can_double_native_classes": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "Expected [<Node2D#710364109153>(double of <null>)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_doulbing_inners_with_objects": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"res://test/resources/doubler_test_objects/inner_classes.gd\"] expected to equal [\"res://test/resources/doubler_test_objects/inner_classes.gd\"]:  check path",
       "[\"InnerA\"] expected to equal [\"InnerA\"]:  check subpath"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_full_strategy_used_for_scripts": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [get_instance_id] to have been called on <Node#617317667689>(double of double_me.gd)"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_full_strategy_used_with_inners": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [get_instance_id] to have been called on <RefCounted#-9223371391183612864>(double of inner_classes.gd/InnerA)"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_full_strategy_used_with_scenes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [get_instance_id] to have been called on Node2D:<Node2D#641359419446>(double of double_me_scene.tscn)"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_an_instance_is_passed_null_is_returned_and_an_error_is_generated": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<null>] to be NULL:  double is null",
       "[1] expected to equal [1]:  generates error"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_passed_a_scene_it_doubles_a_scene": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"res://test/resources/doubler_test_objects/double_me_scene.tscn\"] expected to equal [\"res://test/resources/doubler_test_objects/double_me_scene.tscn\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_passed_a_script_it_doubles_script": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"res://test/resources/doubler_test_objects/double_me.gd\"] expected to equal [\"res://test/resources/doubler_test_objects/double_me.gd\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_passing_a_class_of_a_scene_it_doubles_it": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"res://test/resources/doubler_test_objects/double_me_scene.tscn\"] expected to equal [\"res://test/resources/doubler_test_objects/double_me_scene.tscn\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_passing_a_class_of_a_script_it_doubles_it": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"res://test/resources/doubler_test_objects/double_me.gd\"] expected to equal [\"res://test/resources/doubler_test_objects/double_me.gd\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/integration/test_this_script_has_a_really_long_name_to_test_display.gd": {
    "props": {
     "failures": 0,
     "pending": 1,
     "tests": 1
    },
    "tests": {
     "test_nothing": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [
       "do not need a test, but felt weird to not have one."
      ],
      "status": "pending"
     }
    }
   },
   "res://test/unit/test_autofree.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 11
    },
    "tests": {
     "after_all": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[67.0] expected to equal [67.0]:  no new orphans during script"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_add_queue_free": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_calling_free_all_frees_them": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [to free 1] to be freed",
       "Expected [to free 2] to be freed",
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_calling_free_all_queues_free": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<Node2D#787388308294>free1] to not be freed",
       "Expected [<Node#787405085596>free2] to not be freed",
       "[0] expected to equal [0]:  ",
       "Expected [free1] to be freed",
       "Expected [free2] to be freed"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_add_something": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_free_things_in_tree": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [node] to be freed"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_make_one": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<RefCounted#-9223371250087224369>(autofree.gd)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_does_not_add_basic_types": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_does_not_add_references": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_watch_for_orphans": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "trying to make orphans"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_watch_for_orphans2": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "trying to make orphans"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_awaiter.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 14
    },
    "tests": {
     "test_after_wait_for_signal_signal_is_disconnected": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected object <RefCounted#-9223371246413014081>(test_awaiter.gd/Signaler) to not be connected to signal: [the_signal] on @@171:<Node#790458538603>(awaiter.gd)"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_wait_for_signal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected object @@169:<Node#789921667706>(awaiter.gd) to have emitted signal [timeout]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_wait_for_signal_with_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected object @@170:<Node#790190103483>(awaiter.gd) to have emitted signal [timeout]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_not_paused_by_default": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_not_paused_when_signal_emitted_before_max_time": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_waiting_when_waiting_on_signal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_waiting_while_waiting_on_frames": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_waiting_while_waiting_on_time": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_signal_emitted_after_10_frames": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected object @@165:<Node#789267356286>(awaiter.gd) to have emitted signal [timeout]:  ",
       "[10] expected to equal [10]:  waited enough frames"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_signal_emitted_after_half_second": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected object @@160:<Node#788646599574>(awaiter.gd) to have emitted signal [timeout]:  ",
       "[0.51666666666667] expected to be > than [0.49]:  waited enough time"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_wait_started_emitted_when_waiting_frames": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected object @@163:<Node#789082807252>(awaiter.gd) to have emitted signal [wait_started]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_wait_started_emitted_when_waiting_on_signal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected object @@168:<Node#789737118357>(awaiter.gd) to have emitted signal [wait_started]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_wait_started_emitted_when_waiting_seconds": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected object @@158:<Node#788411718331>(awaiter.gd) to have emitted signal [wait_started]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_signal_not_emitted_max_time_is_waited": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected object @@172:<Node#790693419647>(awaiter.gd) to have emitted signal [timeout]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_command_line_auto_load.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 1
    },
    "tests": {
     "test_auto_load_works": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "should get here"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_comparator.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/unit/test_comparator.gd.TestDeepCompare": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 9
    },
    "tests": {
     "test_comparing_arrays_are_equal_true_when_equal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_comparing_arrays_does_not_include_sub_dictionaries": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_comparing_arrays_sets_summary": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [\"[2] != [3]  1 of 1 indexes do not match.\n  [\n      0:  2 != 3\n  ]\"] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_comparing_dictionaries_does_not_include_sub_dictionaries": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_comparing_dictionaries_populates_are_equal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_comparing_dictionaries_populates_different_keys": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_comparing_dictionaries_populates_summary": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [\"{  } != { \"a\": 1 }  1 of 1 keys do not match.\n  {\n      a:  <missing key> != 1\n  }\"] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_works_with_different_datatypes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_works_with_primitives": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_comparator.gd.TestGodot4ArrayDictionary": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 2
    },
    "tests": {
     "test_simple_compares_arrays_by_value": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([1, 2, 3]) == Array([1, 2, 3])",
       "Array([\"a\", 2, \"c\"]) == Array([\"a\", 2, \"c\"])",
       "Array([\"one\", [1, 2], \"three\"]) == Array([\"one\", [1, 2], \"three\"])"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_simple_compares_dictionaries_by_value": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Dictionary({ \"a\": 1, \"b\": 2 }) == Dictionary({ \"a\": 1, \"b\": 2 })",
       "Dictionary({ \"one\": \"one\", \"two\": [1, 2] }) == Dictionary({ \"one\": \"one\", \"two\": [1, 2] })"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_comparator.gd.TestMissing": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 3
    },
    "tests": {
     "test_missing_code_works_with_non_strings": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_first_value_is_missing_it_uses_missing_string_in_summary": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected '<missing not here> != \"asdf\"' to contain 'not here', match_case=true",
       "Expected '<missing not here> != \"asdf\"' to contain '!=', match_case=true",
       "Expected '<missing not here> != \"asdf\"' to contain 'asdf', match_case=true",
       "Expected [false] to be anything but NULL:  ",
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_second_value_is_missing_it_uses_missing_string_in_summary": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected '\"asdf\" != <missing not here>' to contain 'not here', match_case=true",
       "Expected '\"asdf\" != <missing not here>' to contain '!=', match_case=true",
       "Expected '\"asdf\" != <missing not here>' to contain 'asdf', match_case=true",
       "Expected [false] to be anything but NULL:  ",
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_comparator.gd.TestShouldCompareIntToFloat": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 4
    },
    "tests": {
     "test_when_disabled_float_and_int_are_not_equal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "1 != 1.0.  Cannot compare Int with Float/Real."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_enabled_does_not_change_how_arrays_treat_float_int": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([1]) != Array([1]).\n[1] != [1]  1 of 1 indexes do not match."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_enabled_does_not_change_how_dicts_treat_float_int": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "{ \"a\": 1 } != { \"a\": 1 }  1 of 1 keys do not match.\n  {\n      a:  1 != 1.0.  Cannot compare Int with Float/Real.\n  }"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_enabled_float_and_int_are_equal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "1 == 1.0"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_comparator.gd.TestSimpleCompare": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 7
    },
    "tests": {
     "test_all_not_equal_primitives_have_a_summary": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected '1 != 2' to contain '!=', match_case=equals",
       "Expected '1 != 2' to contain '1', match_case=zero value",
       "Expected '1 != 2' to contain '2', match_case=one value",
       "Expected '\"a\" != \"b\"' to contain '!=', match_case=equals",
       "Expected '\"a\" != \"b\"' to contain 'a', match_case=zero value",
       "Expected '\"a\" != \"b\"' to contain 'b', match_case=one value",
       "Expected 'true != false' to contain '!=', match_case=equals",
       "Expected 'true != false' to contain 'true', match_case=zero value",
       "Expected 'true != false' to contain 'false', match_case=one value",
       "Expected '<null> != 1' to contain '!=', match_case=equals",
       "Expected '<null> != 1' to contain '<null>', match_case=zero value",
       "Expected '<null> != 1' to contain '1', match_case=one value"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_all_primitives_have_a_summary": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected '1 == 1' to contain '==', match_case=equals",
       "Expected '1 == 1' to contain '1', match_case=zero value",
       "Expected '3 == 3.0' to contain '==', match_case=equals",
       "Expected '3 == 3.0' to contain '3', match_case=zero value",
       "Expected '\"a\" == \"a\"' to contain '==', match_case=equals",
       "Expected '\"a\" == \"a\"' to contain 'a', match_case=zero value",
       "Expected 'true == true' to contain '==', match_case=equals",
       "Expected 'true == true' to contain 'true', match_case=zero value",
       "Expected '<null> == <null>' to contain '==', match_case=equals",
       "Expected '<null> == <null>' to contain '<null>', match_case=zero value"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_compare_equal_primitives": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "1 == 1",
       "3 == 3.0",
       "\"a\" == \"a\"",
       "true == true",
       "<null> == <null>"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_compare_not_equal_primitives": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "1 != 2",
       "\"a\" != \"b\"",
       "true != false",
       "<null> != 1"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_comparing_arrays_returns_array_diff_simple_summary": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected 'Array([1, 2]) != Array([3, 4]).\n[1, 2] != [3, 4]  2 of 2 indexes do not match.' to contain '[1, 2] != [3, 4]', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_incompatible_types": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [false] to be anything but NULL:  1 != \"a\".  Cannot compare Int with String.",
       "1 != \"a\".  Cannot compare Int with String.",
       "Expected [false] to be anything but NULL:  \"text\" != Node.  Cannot compare String with TYPE_OBJECT.",
       "\"text\" != Node.  Cannot compare String with TYPE_OBJECT.",
       "Expected [false] to be anything but NULL:  false != Array([]).  Cannot compare Bool with Array.",
       "false != Array([]).  Cannot compare Bool with Array.",
       "Expected [false] to be anything but NULL:  Dictionary({  }) != Array([]).  Cannot compare Dictionary with Array.",
       "Dictionary({  }) != Array([]).  Cannot compare Dictionary with Array.",
       "Expected [false] to be anything but NULL:  Array([]) != 12.  Cannot compare Array with Int.",
       "Array([]) != 12.  Cannot compare Array with Int."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_incompatible_types_summary": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected '1 != \"a\".  Cannot compare Int with String.' to contain 'Cannot', match_case=true",
       "Expected '1 != \"a\".  Cannot compare Int with String.' to contain '!=', match_case=true",
       "Expected '\"text\" != Node.  Cannot compare String with TYPE_OBJECT.' to contain 'Cannot', match_case=true",
       "Expected '\"text\" != Node.  Cannot compare String with TYPE_OBJECT.' to contain '!=', match_case=true",
       "Expected 'false != Array([]).  Cannot compare Bool with Array.' to contain 'Cannot', match_case=true",
       "Expected 'false != Array([]).  Cannot compare Bool with Array.' to contain '!=', match_case=true",
       "Expected 'Dictionary({  }) != Array([]).  Cannot compare Dictionary with Array.' to contain 'Cannot', match_case=true",
       "Expected 'Dictionary({  }) != Array([]).  Cannot compare Dictionary with Array.' to contain '!=', match_case=true",
       "Expected 'Array([]) != 12.  Cannot compare Array with Int.' to contain 'Cannot', match_case=true",
       "Expected 'Array([]) != 12.  Cannot compare Array with Int.' to contain '!=', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_comparator.gd.TestTheBasics": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 2
    },
    "tests": {
     "test_can_make_one": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<RefCounted#-9223371244634629167>(comparator.gd)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_set_should_compare_int_float": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "<RefCounted#-9223371244550743129>(comparator.gd) should have getter starting with get_ or is_",
       "<RefCounted#-9223371244550743129>(comparator.gd) should have method: set_should_compare_int_to_float",
       "[true] expected to equal [true]:  It should have the expected default value.",
       "[false] expected to equal [false]:  The set value should have been returned."
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_compare_result.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 5
    },
    "tests": {
     "test_can_make_one": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<null>(compare_result.gd)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_set_equal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "<null>(compare_result.gd) should have getter starting with get_ or is_",
       "<null>(compare_result.gd) should have method: set_are_equal",
       "[false] expected to equal [false]:  It should have the expected default value.",
       "[true] expected to equal [true]:  The set value should have been returned."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_set_max_differences": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "<null>(compare_result.gd) should have getter starting with get_ or is_",
       "<null>(compare_result.gd) should have method: set_max_differences",
       "[30] expected to equal [30]:  It should have the expected default value.",
       "[40] expected to equal [40]:  The set value should have been returned."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_set_summary": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "<null>(compare_result.gd) should have getter starting with get_ or is_",
       "<null>(compare_result.gd) should have method: set_summary",
       "[<null>] expected to equal [<null>]:  It should have the expected default value.",
       "[\"asdf\"] expected to equal [\"asdf\"]:  The set value should have been returned."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_short_summary_returns_summary": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"adsf\"] expected to equal [\"adsf\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_diff_formatter.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/unit/test_diff_formatter.gd.TestFormatter": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 11
    },
    "tests": {
     "test_absolute_max": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1...98, 10999] != []  11000 of 11000 indexes do not match.\n  [\n      0:  0 != <missing index>\n      1:  1 != <missing index>\n      2:  2 != <missing index>\n      3:  3 != <missing index>\n      4:  4 != <missing index>\n      5:  5 != <missing index>\n      6:  6 != <missing index>\n      7:  7 != <missing index>\n      8:  8 != <missing index>\n      9:  9 != <missing index>\n      10:  10 != <missing index>\n      11:  11 != <missing index>\n      12:  12 != <missing index>\n      13:  13 != <missing index>\n      14:  14 != <missing index>\n      15:  15 != <missing index>\n      16:  16 != <missing index>\n      17:  17 != <missing index>\n      18:  18 != <missing index>\n      19:  19 != <missing index>\n      20:  20 != <missing index>\n      21:  21 != <missing index>\n      22:  22 != <missing index>\n      23:  23 != <missing index>\n      24:  24 != <missing index>\n      25:  25 != <missing index>\n      26:  26 != <missing index>\n      27:  27 != <missing index>\n      28:  28 != <missing index>\n      29:  29 != <missing index>\n      \n      ... 10970 more.\n  ]"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_complex_real_use_output": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "{ \"a\": 1, \"dne_in_d2\": \"asdf\", \"b\": { \"c...z\": {  } } != { \"a\": 1, \"b\": { \"c\": 99, \"e\": \"letter e...z\": {  } }  3 of 5 keys do not match.\n  {\n      b:  {\n          c:  88 != 99\n          d:  22 != <missing key>\n          e:  <missing key> != \"letter e\"\n          f:  {\n              h:  200 != 2\n          }\n      }\n      dne_in_d2:  \"asdf\" != <missing key>\n      i:  [\n          1:  2 != \"two\".  Cannot compare Int with String.\n      ]\n  }"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_demo_eq_format": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([]) == Array([])  ",
       "Array([1, 2, 3]) == Array([1, 2, 3])  ",
       "Dictionary({  }) == Dictionary({  })  ",
       "Dictionary({ \"a\": 1 }) == Dictionary({ \"a\": 1 })  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_equal_arrays": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1, 2, 3] == [1, 2, 3]"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_equal_dictionaries": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "{  } == {  }"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_large_dictionary_summary": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "{ \"A\": 65, \"B\": 66, \"C\": 67, \"D\": 68, \"E...ZZ\": 270 } != { \"A\": \"A\", \"B\": \"B\", \"C\": \"C\", \"D\": \"D\"...ZZ\": \"Z\" }  78 of 78 keys do not match.\n  {\n      A:  65 != \"A\".  Cannot compare Int with String.\n      AA:  130 != \"A\".  Cannot compare Int with String.\n      AAA:  195 != \"A\".  Cannot compare Int with String.\n      B:  66 != \"B\".  Cannot compare Int with String.\n      BB:  {\n          A:  65 != \"A\".  Cannot compare Int with String.\n          AA:  130 != \"A\".  Cannot compare Int with String.\n          B:  66 != \"B\".  Cannot compare Int with String.\n          C:  67 != \"C\".  Cannot compare Int with String.\n          D:  68 != \"D\".  Cannot compare Int with String.\n          E:  69 != \"E\".  Cannot compare Int with String.\n          F:  70 != \"F\".  Cannot compare Int with String.\n          G:  71 != \"G\".  Cannot compare Int with String.\n          H:  72 != \"H\".  Cannot compare Int with String.\n          I:  73 != \"I\".  Cannot compare Int with String.\n          J:  74 != \"J\".  Cannot compare Int with String.\n          K:  75 != \"K\".  Cannot compare Int with String.\n          L:  76 != \"L\".  Cannot compare Int with String.\n          M:  77 != \"M\".  Cannot compare Int with String.\n          N:  78 != \"N\".  Cannot compare Int with String.\n          O:  79 != \"O\".  Cannot compare Int with String.\n          P:  80 != \"P\".  Cannot compare Int with String.\n          Q:  81 != \"Q\".  Cannot compare Int with String.\n          R:  82 != \"R\".  Cannot compare Int with String.\n          S:  83 != \"S\".  Cannot compare Int with String.\n          \n          ... 7 more.\n      }\n      BBB:  198 != \"B\".  Cannot compare Int with String.\n      C:  67 != \"C\".  Cannot compare Int with String.\n      CC:  134 != \"C\".  Cannot compare Int with String.\n      CCC:  201 != \"C\".  Cannot compare Int with String.\n      D:  68 != \"D\".  Cannot compare Int with String.\n      DD:  136 != \"D\".  Cannot compare Int with String.\n      DDD:  204 != \"D\".  Cannot compare Int with String.\n      E:  69 != \"E\".  Cannot compare Int with String.\n      EE:  138 != \"E\".  Cannot compare Int with String.\n      EEE:  207 != \"E\".  Cannot compare Int with String.\n      F:  70 != \"F\".  Cannot compare Int with String.\n      FF:  140 != \"F\".  Cannot compare Int with String.\n      FFF:  210 != \"F\".  Cannot compare Int with String.\n      G:  71 != \"G\".  Cannot compare Int with String.\n      GG:  142 != \"G\".  Cannot compare Int with String.\n      \n      ... 58 more.\n  }"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_mix_of_array_and_dictionaries_deep": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"a\", \"b\", \"c\", [1, 2, 3, 4], { \"a\": 1, ...\"b\": 2 }]] != [\"a\", 2, \"c\", [\"a\", 2, 3, \"d\"], { \"a\": 1...\"b\": 2 }]]  4 of 6 indexes do not match.\n  [\n      1:  \"b\" != 2.  Cannot compare String with Int.\n      3:  [\n          0:  1 != \"a\".  Cannot compare Int with String.\n          3:  4 != \"d\".  Cannot compare Int with String.\n      ]\n      4:  {\n          a:  1 != 11\n          b:  2 != 12\n          c:  3 != 13\n      }\n      5:  [\n          0:  {\n              a:  1 != \"diff\".  Cannot compare Int with String.\n          }\n      ]\n  ]"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_multiple_sub_arrays": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[[1, 2, 3], [[4, 5, 6], [\"same\"], [7, 8,...7, 8, 9]]] != [[11, 12, 13], [[14, 15, 16], [\"same\"], ... 18, 19]]]  2 of 2 indexes do not match.\n  [\n      0:  [\n          0:  1 != 11\n          1:  2 != 12\n          2:  3 != 13\n      ]\n      1:  [\n          0:  [\n              0:  4 != 14\n              1:  5 != 15\n              2:  6 != 16\n          ]\n          2:  [\n              0:  7 != 17\n              1:  8 != 18\n              2:  9 != 19\n          ]\n      ]\n  ]"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_nested_difference": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "{ \"a\": { \"b\": { \"c\": { \"d\": 1 } } } } != { \"a\": { \"b\": { \"c\": { \"d\": 2 } } } }  1 of 1 keys do not match.\n  {\n      a:  {\n          b:  {\n              c:  {\n                  d:  1 != 2\n              }\n          }\n      }\n  }"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_arrays_are_large_then_summarize_truncates": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1...7, 98, 99] != [\"0\", 1, \"2\", 3, \"4\", 5, \"6\", 7, \"8\", 9,...96\", \"98\"]  55 of 100 indexes do not match.\n  [\n      0:  0 != \"0\".  Cannot compare Int with String.\n      2:  2 != \"2\".  Cannot compare Int with String.\n      4:  4 != \"4\".  Cannot compare Int with String.\n      6:  6 != \"6\".  Cannot compare Int with String.\n      8:  8 != \"8\".  Cannot compare Int with String.\n      10:  10 != \"10\".  Cannot compare Int with String.\n      12:  12 != \"12\".  Cannot compare Int with String.\n      14:  14 != \"14\".  Cannot compare Int with String.\n      16:  16 != \"16\".  Cannot compare Int with String.\n      18:  18 != \"18\".  Cannot compare Int with String.\n      20:  20 != \"20\".  Cannot compare Int with String.\n      22:  22 != \"22\".  Cannot compare Int with String.\n      24:  24 != \"24\".  Cannot compare Int with String.\n      26:  26 != \"26\".  Cannot compare Int with String.\n      28:  28 != \"28\".  Cannot compare Int with String.\n      30:  30 != \"30\".  Cannot compare Int with String.\n      32:  32 != \"32\".  Cannot compare Int with String.\n      34:  34 != \"34\".  Cannot compare Int with String.\n      36:  36 != \"36\".  Cannot compare Int with String.\n      38:  38 != \"38\".  Cannot compare Int with String.\n      40:  40 != \"40\".  Cannot compare Int with String.\n      42:  42 != \"42\".  Cannot compare Int with String.\n      44:  44 != \"44\".  Cannot compare Int with String.\n      46:  46 != \"46\".  Cannot compare Int with String.\n      48:  48 != \"48\".  Cannot compare Int with String.\n      50:  50 != \"50\".  Cannot compare Int with String.\n      52:  52 != \"52\".  Cannot compare Int with String.\n      54:  54 != \"54\".  Cannot compare Int with String.\n      56:  56 != \"56\".  Cannot compare Int with String.\n      58:  58 != \"58\".  Cannot compare Int with String.\n      \n      ... 25 more.\n  ]"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_works_with_strings_and_numbers": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0, 1, 2, 3, 4] != [0, \"one\", \"two\", \"three\", \"4\"]  4 of 5 indexes do not match.\n  [\n      1:  1 != \"one\".  Cannot compare Int with String.\n      2:  2 != \"two\".  Cannot compare Int with String.\n      3:  3 != \"three\".  Cannot compare Int with String.\n      4:  4 != \"4\".  Cannot compare Int with String.\n  ]"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_diff_formatter.gd.TestUsingAssertNe": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 2
    },
    "tests": {
     "test_mix_of_array_and_dictionaries": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([\"a\", \"b\", \"c\", [1, 2, 3, 4], { \"a\": 1, \"b\": 2, \"c\": 3 }, [{ \"a\": 1 }, { \"b\": 2 }]]) != Array([\"a\", 2, \"c\", [\"a\", 2, 3, \"d\"], { \"a\": 11, \"b\": 12, \"c\": 13 }, [{ \"a\": \"diff\" }, { \"...b\": 2 }]]).\n[\"a\", \"b\", \"c\", [1, 2, 3, 4], { \"a\": 1, ...\"b\": 2 }]] != [\"a\", 2, \"c\", [\"a\", 2, 3, \"d\"], { \"a\": 1...\"b\": 2 }]]  4 of 6 indexes do not match.  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_works_with_strings_and_numbers": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([0, 1, 2, 3, 4]) != Array([0, \"one\", \"two\", \"three\", \"4\"]).\n[0, 1, 2, 3, 4] != [0, \"one\", \"two\", \"three\", \"4\"]  4 of 5 indexes do not match.  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_diff_tool.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/unit/test_diff_tool.gd.TestArrayCompareResultInterace": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 9
    },
    "tests": {
     "test_are_equal_prop_returns_result_of_diff": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[true] expected to equal [true]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_brackets": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"[\"] expected to equal [\"[\"]:  open",
       "[\"]\"] expected to equal [\"]\"]:  close"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_cannot_set_are_equal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[true] expected to equal [true]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_cannot_set_summary": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"[] == []\"] expected to not equal [\"the summary\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_short_summary_does_not_include_x_of_y_when_equal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[-1] expected to equal [-1]:  [] == []",
       "Expected '[] == []' to contain '==', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_short_summary_includes_x_of_y_keys_when_different": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected '[1, 2, 3, 4] != [1, \"a\", \"b\", \"c\", \"d\"]  4 of 5 indexes do not match.' to contain '4 of 5', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_total_count_returns_correct_count": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[4] expected to equal [4]:  ",
       "[4] expected to equal [4]:  ",
       "[2] expected to equal [2]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_total_different_returns_correct_count": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[3] expected to equal [3]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_summary_prop_returns_summarize": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [\"[] != [1]  1 of 1 indexes do not match.\n  [\n      0:  <missing index> != 1\n  ]\"] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_diff_tool.gd.TestArrayDeepDiff": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 5
    },
    "tests": {
     "test_diff_with_dictionaries_fails_when_different_values": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[{ \"a\": 1 }, { \"b\": 1 }, { \"c\": 1 }, { \"... \"d\": 1 }] != [{ \"a\": 1 }, { \"b\": 2 }, { \"c\": 2 }, { \"... \"d\": 2 }]  3 of 4 indexes do not match.\n  [\n      1:  {\n          b:  1 != 2\n      }\n      2:  {\n          c:  1 != 2\n      }\n      3:  {\n          d:  1 != 2\n      }\n  ]"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_diff_with_dictionaries_passes_when_not_same_reference_but_same_values": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[{ \"a\": 1 }, { \"b\": 2 }] == [{ \"a\": 1 }, { \"b\": 2 }]"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_matching_dictionaries_in_sub_arrays": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[[{ \"a\": 1 }]] == [[{ \"a\": 1 }]]"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_non_matching_dictionaries_in_sub_arrays": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[[{ \"a\": 1 }], [{ \"b\": 1 }], [{ \"c\": 1 }...\"c\": 1 }]] != [[{ \"a\": 1 }], [{ \"b\": 2 }], [{ \"c\": 2 }...\"c\": 2 }]]  2 of 3 indexes do not match.\n  [\n      1:  [\n          0:  {\n              b:  1 != 2\n          }\n      ]\n      2:  [\n          0:  {\n              c:  1 != 2\n          }\n      ]\n  ]"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_deep_compare_non_equal_dictionaries_do_not_contain_disclaimer": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[-1] expected to equal [-1]:  [[{ \"a\": 2 }], [{ \"b\": 3 }], [{ \"c\": 4 }...\"c\": 4 }]] != [[{ \"a\": 1 }], [{ \"b\": 2 }], [{ \"c\": 2 }...\"c\": 2 }]]  3 of 3 indexes do not match.\n  [\n      0:  [\n          0:  {\n              a:  2 != 1\n          }\n      ]\n      1:  [\n          0:  {\n              b:  3 != 2\n          }\n      ]\n      2:  [\n          0:  {\n              c:  4 != 2\n          }\n      ]\n  ]"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_diff_tool.gd.TestArrayDiff": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 14
    },
    "tests": {
     "test_can_instantiate_with_two_arrays": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [[] == [](diff_tool.gd)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_constructor_defaults_diff_type_to_deep": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_constructor_sets_diff_type": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_dictionaries_in_sub_arrays": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[[{ \"a\": 1 }]] == [[{ \"a\": 1 }]]"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_diff_display_with_classes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected '[@@3:<Node#30987519247>, <Node#103512068...20680335>] != [<Node#1035120680335>, @@3:<Node#3098751...87519247>]  2 of 2 indexes do not match.\n  [\n      0:  @@3:<Node#30987519247>(gut.gd) != <Node#1035120680335>(double of test.gd)\n      1:  <Node#1035120680335>(double of test.gd) != @@3:<Node#30987519247>(gut.gd)\n  ]' to contain '(gut.gd)', match_case=true",
       "Expected '[@@3:<Node#30987519247>, <Node#103512068...20680335>] != [<Node#1035120680335>, @@3:<Node#3098751...87519247>]  2 of 2 indexes do not match.\n  [\n      0:  @@3:<Node#30987519247>(gut.gd) != <Node#1035120680335>(double of test.gd)\n      1:  <Node#1035120680335>(double of test.gd) != @@3:<Node#30987519247>(gut.gd)\n  ]' to contain 'double of test.gd', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_diff_display_with_classes2": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected '[<Node#1059346989008>, <Node#10832041829...04182968>] != [<Node#1083204182968>, <Node#10593469890...46989008>]  2 of 2 indexes do not match.\n  [\n      0:  <Node#1059346989008>(double of test.gd) != <Node#1083204182968>(double of test.gd)\n      1:  <Node#1083204182968>(double of test.gd) != <Node#1059346989008>(double of test.gd)\n  ]' to contain 'double of test.gd', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_summary_text_lists_both_arrays": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected '[3, 2, 1, 98, 99] != [1, 2, 3]  4 of 5 indexes do not match.\n  [\n      0:  3 != 1\n      2:  1 != 3\n      3:  98 != <missing index>\n      4:  99 != <missing index>\n  ]' to contain '[3, 2, 1, 98, 99] != [1, 2, 3]', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_summary_text_lists_differences": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected '[3, 2, 1, 98, 99] != [1, 2, 3]  4 of 5 indexes do not match.\n  [\n      0:  3 != 1\n      2:  1 != 3\n      3:  98 != <missing index>\n      4:  99 != <missing index>\n  ]' to contain '0:  3 !=', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_equal_is_true_when_all_elements_match": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_equal_returns_false_when_one_element_does_not_match": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "should be false but is false"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_lists_indexes_as_missing_in_first_array": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected '[1, 2, 3] != [1, 2, 3, 4, 5]  2 of 5 indexes do not match.\n  [\n      3:  <missing index> != 4\n      4:  <missing index> != 5\n  ]' to contain '<missing index> !=', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_arrays_are_equal_summarize_says_so": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected '[\"a\", \"b\", \"c\"] == [\"a\", \"b\", \"c\"]' to contain ' == ', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_arrays_are_large_then_summarize_truncates": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[35] expected to be < than [40]:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1...7, 98, 99] != [\"0\", 1, \"2\", 3, \"4\", 5, \"6\", 7, \"8\", 9,...96\", \"98\"]  55 of 100 indexes do not match.\n  [\n      0:  0 != \"0\".  Cannot compare Int with String.\n      2:  2 != \"2\".  Cannot compare Int with String.\n      4:  4 != \"4\".  Cannot compare Int with String.\n      6:  6 != \"6\".  Cannot compare Int with String.\n      8:  8 != \"8\".  Cannot compare Int with String.\n      10:  10 != \"10\".  Cannot compare Int with String.\n      12:  12 != \"12\".  Cannot compare Int with String.\n      14:  14 != \"14\".  Cannot compare Int with String.\n      16:  16 != \"16\".  Cannot compare Int with String.\n      18:  18 != \"18\".  Cannot compare Int with String.\n      20:  20 != \"20\".  Cannot compare Int with String.\n      22:  22 != \"22\".  Cannot compare Int with String.\n      24:  24 != \"24\".  Cannot compare Int with String.\n      26:  26 != \"26\".  Cannot compare Int with String.\n      28:  28 != \"28\".  Cannot compare Int with String.\n      30:  30 != \"30\".  Cannot compare Int with String.\n      32:  32 != \"32\".  Cannot compare Int with String.\n      34:  34 != \"34\".  Cannot compare Int with String.\n      36:  36 != \"36\".  Cannot compare Int with String.\n      38:  38 != \"38\".  Cannot compare Int with String.\n      40:  40 != \"40\".  Cannot compare Int with String.\n      42:  42 != \"42\".  Cannot compare Int with String.\n      44:  44 != \"44\".  Cannot compare Int with String.\n      46:  46 != \"46\".  Cannot compare Int with String.\n      48:  48 != \"48\".  Cannot compare Int with String.\n      50:  50 != \"50\".  Cannot compare Int with String.\n      52:  52 != \"52\".  Cannot compare Int with String.\n      54:  54 != \"54\".  Cannot compare Int with String.\n      56:  56 != \"56\".  Cannot compare Int with String.\n      58:  58 != \"58\".  Cannot compare Int with String.\n      \n      ... 25 more.\n  ]"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_works_with_strings_and_numbers": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "we got here"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_diff_tool.gd.TestDictionaryCompareResultInterace": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 9
    },
    "tests": {
     "test_are_equal_prop_returns_result_of_diff": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[true] expected to equal [true]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_brackets": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"{\"] expected to equal [\"{\"]:  open",
       "[\"}\"] expected to equal [\"}\"]:  close"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_cannot_set_are_equal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[true] expected to equal [true]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_cannot_set_summary": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"{  } == {  }\"] expected to not equal [\"the summary\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_different_count_returns_correct_number": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_short_summary_does_not_include_x_of_y_when_equal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[-1] expected to equal [-1]:  {  } == {  }",
       "Expected '{  } == {  }' to contain '==', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_short_summary_includes_x_of_y_keys_when_different": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected '{ \"a\": 1, \"b\": 2, \"c\": 3 } != { \"aa\": 9, \"b\": 2, \"cc\": 10 }  4 of 5 keys do not match.' to contain '4 of 5', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_total_count_returns_correct_number": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[5] expected to equal [5]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_summary_prop_returns_summarize": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [\"{  } == {  }\"] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_diff_tool.gd.TestDictionaryDiff": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 17
    },
    "tests": {
     "test_are_equal_true_for_matching_dictionaries": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "empty",
       "same",
       "different order"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_init_with_two_dictionaries": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [{  } == {  }(diff_tool.gd)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_constructor_defaults_diff_type_to_deep": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_dictionary_key_and_non_dictionary_key": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "{ \"a\": 1, \"b\": { \"c\": 1 } } != { \"a\": 1, \"b\": 22 }  1 of 2 keys do not match.\n  {\n      b:  Dictionary({ \"c\": 1 }) != 22.  Cannot compare Dictionary with Int.\n  }"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_ditionaries_in_arrays": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "{ \"a\": [{ \"b\": 1 }] } == { \"a\": [{ \"b\": 1 }] }"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_differences_returns_empty_array_when_matching": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([]) == Array([])  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_differences_returns_non_matching_keys": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([\"b\"]) == Array([\"b\"])  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_differences_works_with_different_datatypes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([\"a\", \"b\", \"c\"]) == Array([\"a\", \"b\", \"c\"])  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_different_keys_returns_missing_indexes_in_d1": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([\"b\"]) == Array([\"b\"])  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_differetn_keys_returns_missing_indexes_in_d2": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([\"b\"]) == Array([\"b\"])  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_large_differences_in_sub_arrays_does_not_exceed_max_differences_shown": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[31] expected to be < than [50]:  { \"a\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10...98, 199] } != { \"a\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1...99, 200] }  2 of 2 keys do not match.\n  {\n      a:  [\n          0:  0 != 1\n          1:  1 != 2\n          2:  2 != 3\n          3:  3 != 4\n          4:  4 != 5\n          5:  5 != 6\n          6:  6 != 7\n          7:  7 != 8\n          8:  8 != 9\n          9:  9 != 10\n          \n          ... 190 more.\n      ]\n      b:  [\n          0:  0 != 1\n          1:  1 != 2\n          2:  2 != 3\n          3:  3 != 4\n          4:  4 != 5\n          5:  5 != 6\n          6:  6 != 7\n          7:  7 != 8\n          8:  8 != 9\n          9:  9 != 10\n          \n          ... 190 more.\n      ]\n  }",
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_sub_dictionary_compare_when_equal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "{ \"a\": 1, \"b\": { \"a\": 99 } } == { \"a\": 1, \"b\": { \"a\": 99 } }"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_sub_dictionary_compare_when_not_equal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "{ \"a\": 1, \"b\": { \"c\": 88, \"d\": 22, \"f\": ...: \"asdf\" } != { \"a\": 1, \"b\": { \"c\": 99, \"e\": \"letter e...z\": {  } }  2 of 4 keys do not match.\n  {\n      b:  {\n          c:  88 != 99\n          d:  22 != <missing key>\n          e:  <missing key> != \"letter e\"\n          f:  {\n              h:  200 != 2\n          }\n      }\n      dne_in_d2:  \"asdf\" != <missing key>\n  }",
       "[4] expected to equal [4]:  total key count",
       "[2] expected to equal [2]:  total different count"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_sub_dictionary_missing_in_other": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected '{ \"a\": 1, \"dne_in_d2\": { \"x\": \"x\", \"y\": ..., \"r\": 1 } != { \"a\": 2, \"dne_in_d1\": { \"xx\": \"x\", \"yy\"..., \"r\": 2 }  4 of 4 keys do not match.\n  {\n      a:  1 != 2\n      dne_in_d1:  <missing key> != Dictionary({ \"xx\": \"x\", \"yy\": \"y\", \"zz\": \"z\" })\n      dne_in_d2:  Dictionary({ \"x\": \"x\", \"y\": \"y\", \"z\": \"z\" }) != <missing key>\n      r:  1 != 2\n  }' to contain 'key> !=', match_case=true",
       "Expected '{ \"a\": 1, \"dne_in_d2\": { \"x\": \"x\", \"y\": ..., \"r\": 1 } != { \"a\": 2, \"dne_in_d1\": { \"xx\": \"x\", \"yy\"..., \"r\": 2 }  4 of 4 keys do not match.\n  {\n      a:  1 != 2\n      dne_in_d1:  <missing key> != Dictionary({ \"xx\": \"x\", \"yy\": \"y\", \"zz\": \"z\" })\n      dne_in_d2:  Dictionary({ \"x\": \"x\", \"y\": \"y\", \"z\": \"z\" }) != <missing key>\n      r:  1 != 2\n  }' to contain ' != <missing', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_summarize": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Visually check this"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_deep_diff_then_different_arrays_contains_DiffTool": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [[1, 2, 3] != [3, 4, 5]  3 of 3 indexes do not match.\n  [\n      0:  1 != 3\n      1:  2 != 4\n      2:  3 != 5\n  ](diff_tool.gd)] to extend [<GDScript#-9223372004474747623>]: "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_with_obj_as_keys": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Visually check this"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_doubler.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/unit/test_doubler.gd.TestAddingIgnoredMethods": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 4
    },
    "tests": {
     "test_can_add_to_ignore_list": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  initial size",
       "[1] expected to equal [1]:  after add"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_double_classes_with_static_methods": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<null>] to be NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_ignored_methods_are_a_local_method_mthey_are_not_present_in_double_code": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected source for <Node#1176250622571>(double of double_me.gd) to not contain \"has_one_param\":  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_ignored_methods_are_a_super_method_they_are_not_present_in_double_code": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected source for <Node#1191752771218>(double of double_me.gd) to not contain \"is_connected\":  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_doubler.gd.TestAutofree": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 2
    },
    "tests": {
     "test_doubles_are_autofreed": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "No new orphans found."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_partial_doubles_are_autofreed": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "No new orphans found."
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_doubler.gd.TestDoubleGDNaviteClasses": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 3
    },
    "tests": {
     "test_can_double_Node2D": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "Expected [<GDScript#-9223370472060604215>] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_make_instances_of_native_doubles": {
      "failing": [

      ],
      "orphans": 2,
      "passing": [
       "Expected [<ColorRect#1633765306136>(double of <null>)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_partial_double_Node2D": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "Expected [<GDScript#-9223370443103131931>] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_doubler.gd.TestDoubleInnerClasses": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 12
    },
    "tests": {
     "test_can_make_an_instance_of_a_double_of_a_registered_inner_class": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<RefCounted#-9223370396546356440>(double of inner_classes.gd/InnerB.InnerB1)] to be anything but NULL:  inst is not null",
       "Expected [<RefCounted#-9223370396546356440>(double of inner_classes.gd/InnerB.InnerB1)] to extend [<GDScript#-9223371957532095628>]: "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_make_partial_of_inner_script": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"a\"] expected to equal [\"a\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_override_strategy_when_doubling": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected source for <RefCounted#-9223370384852636954> to contain \"func disconnect(p_signal\":  ",
       "[0] expected to equal [0]:  strategy should have been reset"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_double_inner_does_not_call_supers": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<null>] expected to equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_doubled_inners_have_subpath_set_in_metadata": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"InnerCA\"] expected to equal [\"InnerCA\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_doubled_inners_retain_signals": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected object <RefCounted#-9223370382956810435>(double of inner_classes.gd/InnerWithSignals) to have signal [signal_signal]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_doubled_inners_that_extend_inners_get_full_inheritance": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "<RefCounted#-9223370394583417324>(double of inner_classes.gd/InnerCA) should have method: get_a",
       "<RefCounted#-9223370394583417324>(double of inner_classes.gd/InnerCA) should have method: get_ca"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_doubled_instance_returns_null_for_get_b1": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<null>] to be NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_non_inners_have_empty_subpath": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"\"] expected to equal [\"\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_partial_double_errors_if_inner_not_registered": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_inner_class_not_registered_it_generates_error": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_inner_class_registered_it_makes_a_double": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  no errors",
       "Expected [<GDScript#-9223370400472226528>] to be anything but NULL:  made a double"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_doubler.gd.TestDoubleScene": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 5
    },
    "tests": {
     "test_can_add_doubled_scene_to_tree": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Label:<Label#1205644310810>] expected to not equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_double_scene": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<null>] expected to equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_override_strategy_when_doubling_scene": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected source for Node2D:<Node2D#1240910013956> to contain \"func is_blocking_signals\":  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_full_start_has_block_signals": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected source for Node2D:<Node2D#1270169485508> to contain \"func is_blocking_signals\":  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_metadata_for_scenes_script_points_to_scene_not_script": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"res://test/resources/doubler_test_objects/double_me_scene.tscn\"] expected to equal [\"res://test/resources/doubler_test_objects/double_me_scene.tscn\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_doubler.gd.TestDoubleStrategyIncludeSuper": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 9
    },
    "tests": {
     "test_built_in_overloading_ony_happens_on_full_strategy": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "text is not empty",
       "Expected source for <Node#1275353641943>(double of double_me.gd) to not contain \"func is_blocking_signals\":  does not have non-overloaded methods"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_call_a_built_in_that_has_default_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "if we got here, it worked"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_override_strategy_when_doubling_script": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected source for <Node#1291124220903> to contain \"func is_blocking_signals\":  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_double_includes_methods_in_super": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected source for <Window#1400025134194> to contain \"connect(\":  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_doubled_builtins_are_added_as_stubs_to_call_super": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_doubled_builtins_call_super": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected source for <Window#1468778165435> to contain \"func add_user_signal(p_signal\":  ",
       "Expected object <Window#1468778165435>(double of double_extends_window_dialog.gd) to have signal [new_one]:  ",
       "Expected object <Window#1468778165435>(double of double_extends_window_dialog.gd) to have signal [new_two]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_everything_included_you_can_still_double_a_scene": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Node2D:<Node2D#1365162083233>(double of double_me_scene.tscn)] expected to not equal [<null>]:  instantiate is not null",
       "[Label:<Label#1365178851352>] expected to not equal [<null>]:  Can get to a label on the instantiate"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_everything_included_you_can_still_make_a_new_node2d": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<Node2D#1336003272599>(double of double_extends_node2d.gd)] expected to not equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_everything_included_you_can_still_make_an_a_new_object": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<Node#1306727031854>(double of double_me.gd)] expected to not equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_doubler.gd.TestDoublingScripts": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 10
    },
    "tests": {
     "test_all_parameters_are_defaulted_to_null": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected source for <Node#1122932632886> to contain \"has_two_params_one_default(p_one=__gutdbl.default_val(\"has_two_params_one_default\",0), p_two=__gutdbl.default_val(\"has_two_params_one_default\",1))\":  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_does_not_add_duplicate_methods": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "If we get here then the duplicates were removed."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_doublecd_thing_has_gut_metadata": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[@@3:<Node#30987519247>(gut.gd)] expected to equal [@@3:<Node#30987519247>(gut.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_doubled_thing_has_original_path_in_metadata": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"res://test/resources/doubler_test_objects/double_me.gd\"] expected to equal [\"res://test/resources/doubler_test_objects/double_me.gd\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_doubled_thing_includes_stubber_metadata": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<RefCounted#-9223370909224519098>(double_tools.gd)] expected to not equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_doubles_retain_signals": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected object <Node#1170764481721>(double of double_me.gd) to have signal [signal_signal]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_doubling_methods_have_parameters_1": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected source for <Node#1118251791626> to contain \"has_one_param(p_one=\":  first parameter for one param method is defined"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_doubling_object_includes_methods": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected source for <Node#1113470280275> to contain \"func get_value(\":  ",
       "Expected source for <Node#1113470280275> to contain \"func set_value(\":  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_keeps_extends": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<Node2D#1143031737253>(double of double_extends_node2d.gd)] to extend [Node2D]: "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_returns_class_that_can_be_instanced": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<Node#1166033298675>(double of double_me.gd)] expected to not equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_doubler.gd.TestPartialDoubles": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 6
    },
    "tests": {
     "test_can_make_partial_of_scene": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"hello\"] expected to equal [\"hello\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_make_partial_of_script": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[10] expected to equal [10]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_partial_and_normal_double_in_same_test": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<null>] to be NULL:  double get_value",
       "[0] expected to equal [0]:  partial get_value"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_double_scene_does_not_call_supers": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<null>] expected to equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_double_script_does_not_make_partials": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<null>] expected to equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_init_is_not_stubbed_to_call_super": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "should not call super _init"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_doubler.gd.TestTheBasics": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 8
    },
    "tests": {
     "test_can_get_set_spy": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "<RefCounted#-9223370932830062809>(doubler.gd) should have getter starting with get_ or is_",
       "<RefCounted#-9223370932830062809>(doubler.gd) should have method: set_spy",
       "[<null>] expected to equal [<null>]:  It should have the expected default value.",
       "[<GDScript#-9223370932427406063>] expected to equal [<GDScript#-9223370932427406063>]:  The set value should have been returned."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_set_strategy_in_constructor": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_doubler_sets_logger_of_method_maker": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<RefCounted#-9223370930414141378>(logger.gd)] expected to equal [<RefCounted#-9223370930414141378>(logger.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_set_gut": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "<RefCounted#-9223370931873761815>(doubler.gd) should have getter starting with get_ or is_",
       "<RefCounted#-9223370931873761815>(doubler.gd) should have method: set_gut",
       "[<null>] expected to equal [<null>]:  It should have the expected default value.",
       "[<GDScript#-9223370931471106930>] expected to equal [<GDScript#-9223370931471106930>]:  The set value should have been returned."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_set_logger": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<RefCounted#-9223370930967789616>(logger.gd)] expected to not equal [<null>]:  ",
       "[<RefCounted#-9223370930867125270>(logger.gd)] expected to equal [<RefCounted#-9223370930867125270>(logger.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_set_strategy": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "<RefCounted#-9223370929776606230>(doubler.gd) should have getter starting with get_ or is_",
       "<RefCounted#-9223370929776606230>(doubler.gd) should have method: set_strategy",
       "[0] expected to equal [0]:  It should have the expected default value.",
       "[1] expected to equal [1]:  The set value should have been returned."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_set_stubber": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "<RefCounted#-9223370933786361252>(doubler.gd) should have getter starting with get_ or is_",
       "<RefCounted#-9223370933786361252>(doubler.gd) should have method: set_stubber",
       "[<RefCounted#-9223370933719252986>(stubber.gd)] expected to equal [<RefCounted#-9223370933719252986>(stubber.gd)]:  It should have the expected default value.",
       "[<GDScript#-9223370933383716343>] expected to equal [<GDScript#-9223370933383716343>]:  The set value should have been returned."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_setting_logger_sets_it_on_method_maker": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<RefCounted#-9223370929894052157>(logger.gd)] expected to equal [<RefCounted#-9223370929894052157>(logger.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_gut.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/unit/test_gut.gd.TestEverythingElse": {
    "props": {
     "failures": 0,
     "pending": 1,
     "tests": 44
    },
    "tests": {
     "after_all": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "POSTTEARDOWN RAN"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_after_running_script_everything_checks_out": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[1] expected to equal [1]:  before_all",
       "[3] expected to equal [3]:  before_each",
       "[1] expected to equal [1]:  after_all",
       "[3] expected to equal [3]:  after_each"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_asserts_on_test_object": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[1] expected to equal [1]:  text",
       "[1] expected to not equal [2]:  text",
       "[5] expected to equal [5] +/- [0]:  text",
       "[5] expected to not equal [6] +/- [0]:  text",
       "[10] expected to be > than [5]:  text",
       "[1] expected to be < than [2]:  text",
       "text",
       "text",
       "[5] expected to be between [1] and [10]:  text",
       "expected [res://doesnotexist] to NOT exist",
       "expected [user://gut_test_file.txt] to exist.",
       "expected [user://gut_test_empty.txt] to be empty",
       "expected [user://gut_test_not_empty.txt] to contain data"
      ],
      "pending": [
       "This really is not pending"
      ],
      "status": "pending"
     },
     "test_before_all_after_all_printing": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[4] expected to equal [4]:  pass count",
       "[4] expected to equal [4]:  fail count",
       "[8] expected to equal [8]:  assert count`"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_before_all_after_all_printing_all_classes_in_script": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[10] expected to equal [10]:  pass count",
       "[10] expected to equal [10]:  fail count",
       "[20] expected to equal [20]:  assert count`"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_run_tests_with_parameters": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[1] expected to equal [1]:  pass count",
       "[1] expected to equal [1]:  test count"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_clears_ignored_methods_between_tests": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_delete_all_files_in_a_directory": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[2] expected to equal [2]:  passes:  both files should not exist"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_failing_asserts_made_in_after_all_are_counted": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[1] expected to equal [1]:  assert count",
       "[1] expected to equal [1]:  fail count"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_failing_asserts_made_in_before_all_are_counted": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[1] expected to equal [1]:  assert count",
       "[1] expected to equal [1]:  fail count"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_file_delete_kills_file": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[1] expected to equal [1]:  passes:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_file_touch_creates_file": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[1] expected to equal [1]:  passes:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_gut_clears_test_instances_between_runs": {
      "failing": [

      ],
      "orphans": 2,
      "passing": [
       "[1] expected to equal [1]:  The should only be one test script after a second run"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_parameterized_test_calls_after_each_after_each_test": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[3] expected to equal [3]:  ",
       "[3] expected to equal [3]:  test class:  after_count"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_parameterized_test_calls_before_each_before_each_test": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[3] expected to equal [3]:  ",
       "[3] expected to equal [3]:  test class:  before_count"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_parameterized_test_that_yield_are_called_correctly": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[3] expected to equal [3]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_parameterized_tests_are_called_multiple_times": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[3] expected to equal [3]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passing_asserts_made_in_after_all_are_counted": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[1] expected to equal [1]:  assert count",
       "[1] expected to equal [1]:  pass count"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passing_asserts_made_in_before_all_are_counted": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[1] expected to equal [1]:  assert count",
       "[1] expected to equal [1]:  pass count"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_post_hook_is_run_after_tests": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "Expected [<RefCounted#-9223370247917001982>(post_run_script.gd)] to extend [<GDScript#-9223370248269319460>]: Instance is set",
       "run was called"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_pre_hook_does_not_accept_non_hook_scripts": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[0] expected to equal [0]:  test should not be run",
       "[2] expected to be > than [0]:  there should be errors"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_pre_hook_sets_gut_instance": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[@@288:<Node#1784273714992>(gut.gd)] expected to equal [@@288:<Node#1784273714992>(gut.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_setting_name_matches_partial": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_setting_name_will_run_only_matching_tests": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_too_many_parameters_generates_an_error": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[1] expected to equal [1]:  error size",
       "[0] expected to equal [0]:  test count"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_verify_results": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[1] expected to equal [1]:  Prerun setup should have been called once",
       "[43] expected to equal [43]:  Setup should have been called once for each test",
       "[42] expected to equal [42]:  Teardown should have been called one less time."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_a_test_has_no_asserts_a_warning_is_generated": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_inner_class_skipped_none_of_the_before_after_are_called": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[1] expected to equal [1]:  TestInner1 before_all calls",
       "[1] expected to equal [1]:  TestInner1 after_all calls",
       "[1] expected to equal [1]:  TestInner1 before_each_calls",
       "[1] expected to equal [1]:  TestInner1 after_each calls",
       "[0] expected to equal [0]:  TestInner2 before_all calls",
       "[0] expected to equal [0]:  TestInner2 after_all calls",
       "[0] expected to equal [0]:  TestInner2 before_each_calls",
       "[0] expected to equal [0]:  TestInner2 after_each calls"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_moving_to_next_test_watched_signals_are_cleared": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[1] expected to equal [1]:  One test should have passed.",
       "[1] expected to equal [1]:  One failure for not watching anymore."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_post_hook_set_to_invalid_script_no_tests_are_ran": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[0] expected to equal [0]:  test should not be run",
       "[2] expected to be > than [0]:  there should be errors"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_pre_hook_set_run_method_is_called": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_pre_hook_set_script_instance_is_is_retrievable": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "Expected [<RefCounted#-9223370255986838240>(pre_run_script.gd)] to extend [<GDScript#-9223370256339161568>]: "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_pre_hook_set_to_invalid_script_no_tests_are_ran": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[0] expected to equal [0]:  test should not be run",
       "[2] expected to be > than [0]:  there should be errors"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_script_has_const_that_starts_with_Test_it_ignores_it": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "we got here"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_set_only_inner_class_tests_run": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[4] expected to equal [4]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_strict_disabled_can_compare_int_and_float": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[1] expected to equal [1]:  passes:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_strict_enabled_you_can_compare_int_and_float": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[1] expected to equal [1]:  passes:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_test_overrides_strategy_it_is_reset_after_test_finishes": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_use_parameters_is_not_called_then_error_is_generated": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[1] expected to equal [1]:  error size",
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_with_fail_test_call_no_assert_warning_is_not_generated": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_with_failing_assert_no_assert_warning_is_not_generated": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_with_pass_test_call_no_assert_warning_is_not_generated": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_with_passing_assert_no_assert_warning_is_not_generated": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_with_pending_call_no_assert_warning_is_no_generated": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_gut.gd.TestMisc": {
    "props": {
     "failures": 1,
     "pending": 0,
     "tests": 2
    },
    "tests": {
     "test_gut_does_not_make_orphans_when_added_to_scene": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "No new orphans found."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_gut_does_not_make_orphans_when_freed_before_in_tree": {
      "failing": [
       "Expected no orphans, but found 1\n      at line 153"
      ],
      "orphans": 1,
      "passing": [

      ],
      "pending": [

      ],
      "status": "fail"
     }
    }
   },
   "res://test/unit/test_gut.gd.TestProperties": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 6
    },
    "tests": {
     "test_basic_properties": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "<Node#1730368512172>(gut.gd) should have method: @paint_after_setter",
       "<Node#1730368512172>(gut.gd) should have method: @paint_after_getter",
       "[0.1] expected to equal [0.1]:  Default value",
       "[1.5] expected to equal [1.5]:  Getter gets Setter value"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_check_backed_properties": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "<Node#1711963906220> has _disable_strict_datatype_checks variable.",
       "There should be a setter for disable_strict_datatype_checks",
       "There should be a getter for disable_strict_datatype_checks",
       "[false] expected to equal [false]:  Variable _disable_strict_datatype_checks has default value.",
       "[false] expected to equal [false]:  Getter returns default value.",
       "[true] expected to equal [true]:  Getter returns value from Setter.",
       "[true] expected to equal [true]:  Variable _disable_strict_datatype_checks was set",
       "<Node#1713121534124> has _log_level variable.",
       "There should be a setter for log_level",
       "There should be a getter for log_level",
       "[1] expected to equal [1]:  Variable _log_level has default value.",
       "[1] expected to equal [1]:  Getter returns default value.",
       "[3] expected to equal [3]:  Getter returns value from Setter.",
       "[3] expected to equal [3]:  Variable _log_level was set",
       "<Node#1714195275948> has _disable_strict_datatype_checks variable.",
       "There should be a setter for disable_strict_datatype_checks",
       "There should be a getter for disable_strict_datatype_checks",
       "[false] expected to equal [false]:  Variable _disable_strict_datatype_checks has default value.",
       "[false] expected to equal [false]:  Getter returns default value.",
       "[true] expected to equal [true]:  Getter returns value from Setter.",
       "[true] expected to equal [true]:  Variable _disable_strict_datatype_checks was set",
       "<Node#1715269017772> has _include_subdirectories variable.",
       "There should be a setter for include_subdirectories",
       "There should be a getter for include_subdirectories",
       "[false] expected to equal [false]:  Variable _include_subdirectories has default value.",
       "[false] expected to equal [false]:  Getter returns default value.",
       "[true] expected to equal [true]:  Getter returns value from Setter.",
       "[true] expected to equal [true]:  Variable _include_subdirectories was set",
       "<Node#1716342759596> has _double_strategy variable.",
       "There should be a setter for double_strategy",
       "There should be a getter for double_strategy",
       "[1] expected to equal [1]:  Variable _double_strategy has default value.",
       "[1] expected to equal [1]:  Getter returns default value.",
       "[2] expected to equal [2]:  Getter returns value from Setter.",
       "[2] expected to equal [2]:  Variable _double_strategy was set",
       "<Node#1717416501420> has _pre_run_script variable.",
       "There should be a setter for pre_run_script",
       "There should be a getter for pre_run_script",
       "[\"\"] expected to equal [\"\"]:  Variable _pre_run_script has default value.",
       "[\"\"] expected to equal [\"\"]:  Getter returns default value.",
       "[\"res://something.gd\"] expected to equal [\"res://something.gd\"]:  Getter returns value from Setter.",
       "[\"res://something.gd\"] expected to equal [\"res://something.gd\"]:  Variable _pre_run_script was set",
       "<Node#1718490243244> has _post_run_script variable.",
       "There should be a setter for post_run_script",
       "There should be a getter for post_run_script",
       "[\"\"] expected to equal [\"\"]:  Variable _post_run_script has default value.",
       "[\"\"] expected to equal [\"\"]:  Getter returns default value.",
       "[\"res://something_else.gd\"] expected to equal [\"res://something_else.gd\"]:  Getter returns value from Setter.",
       "[\"res://something_else.gd\"] expected to equal [\"res://something_else.gd\"]:  Variable _post_run_script was set",
       "<Node#1719563985068> has _color_output variable.",
       "There should be a setter for color_output",
       "There should be a getter for color_output",
       "[false] expected to equal [false]:  Variable _color_output has default value.",
       "[false] expected to equal [false]:  Getter returns default value.",
       "[true] expected to equal [true]:  Getter returns value from Setter.",
       "[true] expected to equal [true]:  Variable _color_output was set",
       "<Node#1720637726892> has _junit_xml_file variable.",
       "There should be a setter for junit_xml_file",
       "There should be a getter for junit_xml_file",
       "[\"\"] expected to equal [\"\"]:  Variable _junit_xml_file has default value.",
       "[\"\"] expected to equal [\"\"]:  Getter returns default value.",
       "[\"user://somewhere.json\"] expected to equal [\"user://somewhere.json\"]:  Getter returns value from Setter.",
       "[\"user://somewhere.json\"] expected to equal [\"user://somewhere.json\"]:  Variable _junit_xml_file was set",
       "<Node#1721711468716> has _junit_xml_timestamp variable.",
       "There should be a setter for junit_xml_timestamp",
       "There should be a getter for junit_xml_timestamp",
       "[false] expected to equal [false]:  Variable _junit_xml_timestamp has default value.",
       "[false] expected to equal [false]:  Getter returns default value.",
       "[true] expected to equal [true]:  Getter returns value from Setter.",
       "[true] expected to equal [true]:  Variable _junit_xml_timestamp was set",
       "<Node#1722785210540> has _export_path variable.",
       "There should be a setter for export_path",
       "There should be a getter for export_path",
       "[\"\"] expected to equal [\"\"]:  Variable _export_path has default value.",
       "[\"\"] expected to equal [\"\"]:  Getter returns default value.",
       "[\"res://somewhere/cool\"] expected to equal [\"res://somewhere/cool\"]:  Getter returns value from Setter.",
       "[\"res://somewhere/cool\"] expected to equal [\"res://somewhere/cool\"]:  Variable _export_path was set",
       "<Node#1723858952364> has _color_output variable.",
       "There should be a setter for color_output",
       "There should be a getter for color_output",
       "[false] expected to equal [false]:  Variable _color_output has default value.",
       "[false] expected to equal [false]:  Getter returns default value.",
       "[true] expected to equal [true]:  Getter returns value from Setter.",
       "[true] expected to equal [true]:  Variable _color_output was set",
       "<Node#1724932694188> has _temp_directory variable.",
       "There should be a setter for temp_directory",
       "There should be a getter for temp_directory",
       "[\"user://gut_temp_directory\"] expected to equal [\"user://gut_temp_directory\"]:  Variable _temp_directory has default value.",
       "[\"user://gut_temp_directory\"] expected to equal [\"user://gut_temp_directory\"]:  Getter returns default value.",
       "[\"user://blahblah\"] expected to equal [\"user://blahblah\"]:  Getter returns value from Setter.",
       "[\"user://blahblah\"] expected to equal [\"user://blahblah\"]:  Variable _temp_directory was set",
       "<Node#1726006436012> has _parameter_handler variable.",
       "There should be a setter for parameter_handler",
       "There should be a getter for parameter_handler",
       "[<null>] expected to equal [<null>]:  Variable _parameter_handler has default value.",
       "[<null>] expected to equal [<null>]:  Getter returns default value.",
       "[<RefCounted#-9223370324974756398>(parameter_handler.gd)] expected to equal [<RefCounted#-9223370324974756398>(parameter_handler.gd)]:  Getter returns value from Setter.",
       "[<RefCounted#-9223370324974756398>(parameter_handler.gd)] expected to equal [<RefCounted#-9223370324974756398>(parameter_handler.gd)]:  Variable _parameter_handler was set",
       "<Node#1727080177836> has _ignore_pause_before_teardown variable.",
       "There should be a setter for ignore_pause_before_teardown",
       "There should be a getter for ignore_pause_before_teardown",
       "[false] expected to equal [false]:  Variable _ignore_pause_before_teardown has default value.",
       "[false] expected to equal [false]:  Getter returns default value.",
       "[true] expected to equal [true]:  Getter returns value from Setter.",
       "[true] expected to equal [true]:  Variable _ignore_pause_before_teardown was set",
       "<Node#1728153919660> has _inner_class_name variable.",
       "There should be a setter for inner_class_name",
       "There should be a getter for inner_class_name",
       "[\"\"] expected to equal [\"\"]:  Variable _inner_class_name has default value.",
       "[\"\"] expected to equal [\"\"]:  Getter returns default value.",
       "[\"TestSomeInnerClass\"] expected to equal [\"TestSomeInnerClass\"]:  Getter returns value from Setter.",
       "[\"TestSomeInnerClass\"] expected to equal [\"TestSomeInnerClass\"]:  Variable _inner_class_name was set",
       "<Node#1729227661484> has _unit_test_name variable.",
       "There should be a setter for unit_test_name",
       "There should be a getter for unit_test_name",
       "[\"\"] expected to equal [\"\"]:  Variable _unit_test_name has default value.",
       "[\"\"] expected to equal [\"\"]:  Getter returns default value.",
       "[\"test_something_cool\"] expected to equal [\"test_something_cool\"]:  Getter returns value from Setter.",
       "[\"test_something_cool\"] expected to equal [\"test_something_cool\"]:  Variable _unit_test_name was set"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_current_script_object_returns_null_by_default": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[<null>] expected to equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_logger_backed_property": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "<Node#1732549553010> has _lgr variable.",
       "There should be a setter for logger",
       "There should be a getter for logger",
       "[<RefCounted#-9223370304288443194>(logger.gd)] expected to equal [<RefCounted#-9223370304288443194>(logger.gd)]:  Variable _lgr has default value.",
       "[<RefCounted#-9223370304288443194>(logger.gd)] expected to equal [<RefCounted#-9223370304288443194>(logger.gd)]:  Getter returns default value.",
       "[<RefCounted#-9223370303432806174>(logger.gd)] expected to equal [<RefCounted#-9223370303432806174>(logger.gd)]:  Getter returns value from Setter.",
       "[<RefCounted#-9223370303432806174>(logger.gd)] expected to equal [<RefCounted#-9223370303432806174>(logger.gd)]:  Variable _lgr was set"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_property_add_children_to_backed": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "<Node#1731459031212> has _add_children_to variable.",
       "There should be a setter for add_children_to",
       "There should be a getter for add_children_to",
       "[<Node#1731459031212>(gut.gd)] expected to equal [<Node#1731459031212>(gut.gd)]:  Variable _add_children_to has default value.",
       "[<Node#1731459031212>(gut.gd)] expected to equal [<Node#1731459031212>(gut.gd)]:  Getter returns default value.",
       "[@@205:<Node#1711695471144>(test_gut.gd/TestProperties)] expected to equal [@@205:<Node#1711695471144>(test_gut.gd/TestProperties)]:  Getter returns value from Setter.",
       "[@@205:<Node#1711695471144>(test_gut.gd/TestProperties)] expected to equal [@@205:<Node#1711695471144>(test_gut.gd/TestProperties)]:  Variable _add_children_to was set"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_setting_logger_sets_gut_for_logger": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[<Node#1733707183728>(gut.gd)] expected to equal [<Node#1733707183728>(gut.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_gut.gd.TestSimulate": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 4
    },
    "tests": {
     "test_simulate_calls_physics_process": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[10] expected to equal [10]:  _process should have been called 10 times",
       "[\"1\"] expected to equal [\"1\"]:  The delta value should have been passed in and summed"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_simulate_calls_process": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[10] expected to equal [10]:  _process should have been called 10 times",
       "[\"1\"] expected to equal [\"1\"]:  The delta value should have been passed in and summed"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_simulate_calls_process_on_child_objects": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[10] expected to equal [10]:  _process should have been called on the child object too"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_simulate_calls_process_on_child_objects_of_child_objects": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[10] expected to equal [10]:  _process should have been called on object # 0",
       "[10] expected to equal [10]:  _process should have been called on object # 1",
       "[10] expected to equal [10]:  _process should have been called on object # 2",
       "[10] expected to equal [10]:  _process should have been called on object # 3",
       "[10] expected to equal [10]:  _process should have been called on object # 4"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_gut_directory.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/unit/test_gut_directory.gd.TestUsingDynamicDirs": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 3
    },
    "tests": {
     "test_test_data_looks_ok": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_subdir_false_it_does_not_find_subdirectories": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_subdir_true_it_finds_subdirectories": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_gut_directory.gd.TestUsingResDirs": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 7
    },
    "tests": {
     "test_adding_directory_does_not_load_bad_prefixed_files": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_adding_directory_loads_files": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_adding_directory_loads_files_for_given_suffix": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "",
       "[1] expected to equal [1]:  Should not find more than one test script with 'specific_suffix.gd'"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_adding_directory_skips_files_with_wrong_extension": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_adding_same_directory_does_not_add_duplicates": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[149] expected to equal [149]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_directories123_defined_in_editor_are_loaded_on_ready": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       "[3] expected to equal [3]:  they should have passed"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_if_directory_does_not_exist_it_does_not_die": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "We should get here"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_gut_yielding.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/unit/test_gut_yielding.gd.TestPauseBeforeTeardown": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 5
    },
    "tests": {
     "test_can_call_pause_before_yielding": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "should  see a pause"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_pause_after_yielding": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "should have seen a pause and press continue"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_pause_between_each_parameterized_test": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to be between [-10] and [10]:  ",
       "[2] expected to be between [-10] and [10]:  ",
       "[3] expected to be between [-10] and [10]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_pause_twice": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Got here"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_wait_for_continue_click": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Got here"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_gut_yielding.gd.TestWaitFrames": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 5
    },
    "tests": {
     "test_can_await_using_wait_frames": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "we got here"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_neg_number_generates_error": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_renders_message": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[119] expected to be between [118] and [122]:  ",
       "did you look at the output?"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_waits_x_frames": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[4] expected to be between [4] and [6]:  ",
       "[10] expected to be between [9] and [11]:  ",
       "[15] expected to be between [14] and [16]:  ",
       "[20] expected to be between [19] and [21]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_zero_generates_error": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_gut_yielding.gd.TestWaitSeconds": {
    "props": {
     "failures": 1,
     "pending": 1,
     "tests": 5
    },
    "tests": {
     "test_failing_assert_ends_yield": {
      "failing": [
       "[0.50833333333333] expected to be > than [999.0]:  Testing that GUT continues after failing assert; ignore failing unless value not ~.5.\n      at line 183"
      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [

      ],
      "status": "fail"
     },
     "test_new_yield": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2.0] expected to be > than [1.9]:  should  see two 1 second pauses"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_output_for_long_yields": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2.01639633333333] expected to be > than [1.9]:  Visually check this"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passing_assert_ends_yield": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0.51666666666667] expected to be > than [0.49]:  yield should stop"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_pending_ends_yield": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [
       "Testing Gut continues after yield.  0.506034 should be ~.5."
      ],
      "status": "pending"
     }
    }
   },
   "res://test/unit/test_gut_yielding.gd.TestYieldTo": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 8
    },
    "tests": {
     "test_after_yield_to_gut_disconnects_from_signal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_yield_to_signal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0.51666666666667] expected to be > than [0.49]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_yield_to__watches_signals": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected object @@451:<Node2D#1895422771487>(test_gut_yielding.gd/TimedSignaler) to have emitted signal [the_signal]:  ",
       "[0.525] expected to be between [0.48] and [0.54]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_yield_to__will_disconnect_after_yield_finishes_and_signal_wasnt_emitted": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_yield_to__will_stop_timer_when_signal_emitted": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_yield_to__will_wait_max_time": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2.00833333333333] expected to be > than [1.9]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_yield_to_works_on_signals_with_max_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected object @@457:<Node2D#1895959643728>(test_gut_yielding.gd/TimedSignalerMaxParams) to have emitted signal [the_signal]:  ",
       "[0.525] expected to be < than [0.58]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_yield_to_works_on_signals_with_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected object @@454:<Node2D#1895691201079>(test_gut_yielding.gd/TimeSignalerParam) to have emitted signal [the_signal]:  ",
       "[0.525] expected to be < than [0.54]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_gut_yielding.gd.TestYieldsInTests": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 8
    },
    "tests": {
     "test_can_yield_using_built_in_timer": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "should have seen a pause"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_returning_int_does_not_cause_yield": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "this should not cause error"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_returning_object_does_not_cause_yield": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "this should not cause error"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_returning_string_does_not_cause_yield": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "this should not cause error"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_setting_yield_time_twice_resets_time": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "should have seen a pause"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_what_is_wrong": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected object @@426:<Node2D#1891631120688>(test_gut_yielding.gd/TimedSignaler) to have emitted signal [the_signal]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_will_wait_when_yielding": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "should have seen a pause"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_with_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"a\"] expected to equal [\"a\"]:  ",
       "[\"b\"] expected to equal [\"b\"]:  ",
       "[\"c\"] expected to equal [\"c\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_inner_class_registry.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 9
    },
    "tests": {
     "test_base_path_is_the_path_to_the_script": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"res://test/resources/doubler_test_objects/inner_classes.gd\"] expected to equal [\"res://test/resources/doubler_test_objects/inner_classes.gd\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_get_base_resource_for_inner_class": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<GDScript#-9223371957733422225>] expected to equal [<GDScript#-9223371957733422225>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_get_subpath_for_registered": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\".InnerB.InnerB1\"] expected to equal [\".InnerB.InnerB1\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_make_one": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<RefCounted#-9223370138814765677>(inner_class_registry.gd)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_AnotherA_back_for_AnotherA": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"'res://test/resources/doubler_test_objects/inner_classes.gd'.AnotherInnerA\"] expected to equal [\"'res://test/resources/doubler_test_objects/inner_classes.gd'.AnotherInnerA\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_base_resource_returns_null_when_not_registered": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<null>] expected to equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_has_level_1_inner_classes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"'res://test/resources/doubler_test_objects/inner_classes.gd'.InnerA\"] expected to equal [\"'res://test/resources/doubler_test_objects/inner_classes.gd'.InnerA\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_has_level_2_inner_classes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"'res://test/resources/doubler_test_objects/inner_classes.gd'.InnerB.InnerB1\"] expected to equal [\"'res://test/resources/doubler_test_objects/inner_classes.gd'.InnerB.InnerB1\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_inner_not_registered_null_is_returned": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<null>] to be NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_input_factory.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/unit/test_input_factory.gd.TestCreateActionEvents": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 6
    },
    "tests": {
     "test_action_down_creates_correct_class": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [InputEventAction: action=\"foo\", pressed=true] to extend [InputEventAction]: "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_action_down_defaults_strength": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1.0] expected to equal [1.0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_action_down_sets_properties": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[TYPE_STRING_NAME(foo)] expected to equal [\"foo\"]:  action name",
       "[true] expected to equal [true]:  pressed",
       "[0.5] expected to equal [0.5]:  strength"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_action_up_creates_correct_class": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [InputEventAction: action=\"foo\", pressed=false] to extend [InputEventAction]: "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_action_up_defaults_strength": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1.0] expected to equal [1.0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_action_up_sets_properties": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[TYPE_STRING_NAME(foo)] expected to equal [\"foo\"]:  action name",
       "[false] expected to equal [false]:  pressed",
       "[0.5] expected to equal [0.5]:  strength"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_input_factory.gd.TestCreateKeyEvents": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 5
    },
    "tests": {
     "test_key_down_converts_lowercase_string_to_keycode": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[90] expected to equal [90]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_key_down_creates_event_for_key": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [InputEventKey: keycode=66 (B), mods=none, physical=false, pressed=true, echo=false] to extend [InputEventKey]: is InputEventKey",
       "[66] expected to equal [66]:  ",
       "pressed"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_key_up_converts_lowercase_string_to_keycode": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[65] expected to equal [65]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_key_up_converts_uppercase_string_to_keycode": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[65] expected to equal [65]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_key_up_creates_event_for_key": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [InputEventKey: keycode=65 (A), mods=none, physical=false, pressed=false, echo=false] to extend [InputEventKey]: is InputEventKey",
       "[65] expected to equal [65]:  ",
       "pressed"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_input_factory.gd.TestMouseButtons": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 5
    },
    "tests": {
     "test_double_clickk": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [InputEventMouseButton: button_index=1, mods=none, pressed=false, position=((10, 10)), button_mask=0, double_click=true] to extend [InputEventMouseButton]: correct class",
       "[Vector2(10, 10)] expected to equal [Vector2(10, 10)]:  position",
       "[false] expected to equal [false]:  pressed",
       "[1] expected to equal [1]:  button_index",
       "[Vector2(10, 10)] expected to equal [Vector2(10, 10)]:  position",
       "[Vector2(11, 11)] expected to equal [Vector2(11, 11)]:  global position",
       "double click"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_lmb_down": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [InputEventMouseButton: button_index=1, mods=none, pressed=true, position=((10, 10)), button_mask=0, double_click=false] to extend [InputEventMouseButton]: correct class",
       "[Vector2(10, 10)] expected to equal [Vector2(10, 10)]:  position",
       "[true] expected to equal [true]:  pressed",
       "[1] expected to equal [1]:  button_index",
       "[Vector2(10, 10)] expected to equal [Vector2(10, 10)]:  position",
       "[Vector2(11, 11)] expected to equal [Vector2(11, 11)]:  global position"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_lmb_up": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [InputEventMouseButton: button_index=1, mods=none, pressed=false, position=((10, 10)), button_mask=0, double_click=false] to extend [InputEventMouseButton]: correct class",
       "[Vector2(10, 10)] expected to equal [Vector2(10, 10)]:  position",
       "[false] expected to equal [false]:  pressed",
       "[1] expected to equal [1]:  button_index",
       "[Vector2(10, 10)] expected to equal [Vector2(10, 10)]:  position",
       "[Vector2(11, 11)] expected to equal [Vector2(11, 11)]:  global position"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_rmb_down": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [InputEventMouseButton: button_index=2, mods=none, pressed=true, position=((10, 10)), button_mask=0, double_click=false] to extend [InputEventMouseButton]: correct class",
       "[Vector2(10, 10)] expected to equal [Vector2(10, 10)]:  position",
       "[true] expected to equal [true]:  pressed",
       "[2] expected to equal [2]:  button_index",
       "[Vector2(10, 10)] expected to equal [Vector2(10, 10)]:  position",
       "[Vector2(11, 11)] expected to equal [Vector2(11, 11)]:  global position"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_rmb_up": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [InputEventMouseButton: button_index=2, mods=none, pressed=false, position=((10, 10)), button_mask=0, double_click=false] to extend [InputEventMouseButton]: correct class",
       "[Vector2(10, 10)] expected to equal [Vector2(10, 10)]:  position",
       "[false] expected to equal [false]:  pressed",
       "[2] expected to equal [2]:  button_index",
       "[Vector2(10, 10)] expected to equal [Vector2(10, 10)]:  position",
       "[Vector2(11, 11)] expected to equal [Vector2(11, 11)]:  global position"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_input_factory.gd.TestMouseMotion": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 9
    },
    "tests": {
     "test_can_specify_global_position": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Vector2(2, 2)] expected to equal [Vector2(2, 2)]:  global_position"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_creates_correct_event_type": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [InputEventMouseMotion: button_mask=0, position=((1, 1)), relative=((0, 0)), velocity=((0, 0)), pressure=0.00, tilt=((0, 0)), pen_inverted=(false)] to extend [InputEventMouseMotion]: "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_mouse_relative_motion_makes_new_base_motion_without_last_event": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Vector2(10, 10)] expected to equal [Vector2(10, 10)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_mouse_relative_offsets_last_event_position_and_global_position": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Vector2(12, 12)] expected to equal [Vector2(12, 12)]:  position",
       "[Vector2(22, 22)] expected to equal [Vector2(22, 22)]:  global_position"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_mouse_relative_sets_relative_to_offset": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Vector2(2, 2)] expected to equal [Vector2(2, 2)]:  position"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_mouse_relative_sets_speed_defaults_to_zero_zero": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Vector2(0, 0)] expected to equal [Vector2(0, 0)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_mouse_relative_sets_speed_when_last_motion_not_sent": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Vector2(10, 10)] expected to equal [Vector2(10, 10)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_mouse_relatvie_sets_speed_when_specified": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Vector2(1, 1)] expected to equal [Vector2(1, 1)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_properties_are_set": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Vector2(1, 1)] expected to equal [Vector2(1, 1)]:  position",
       "[Vector2(0, 0)] expected to equal [Vector2(0, 0)]:  default global_position"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_input_sender.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/unit/test_input_sender.gd.TestAtScriptLevel": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 3
    },
    "tests": {
     "test_one": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_three": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_two": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_input_sender.gd.TestClear": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 9
    },
    "tests": {
     "test_clears_next_queue_item": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<null>] to be NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_echo_does_not_echo_after_clear": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_frees_queue_items": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [q_item] to be freed"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_hold_for_does_nothing_after_clear": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_idle_after_clear": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_relative_mouse_motion_uses_0_0_after_clear": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Vector2(3, 3)] expected to equal [Vector2(3, 3)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_release_all_releases_no_actions_after_clear": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_release_all_releases_no_keys_after_clear": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_release_all_releases_no_mouse_buttons_after_clear": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_input_sender.gd.TestCreateActionEvents": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 4
    },
    "tests": {
     "test_aciton_up_returns_self": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<RefCounted#-9223370110729701956>(input_sender.gd)] expected to equal [<RefCounted#-9223370110729701956>(input_sender.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_action_down_returns_self": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<RefCounted#-9223370110394154239>(input_sender.gd)] expected to equal [<RefCounted#-9223370110394154239>(input_sender.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_action_down_sends_event": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[TYPE_STRING_NAME(foo)] expected to equal [\"foo\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_action_up_sends_event": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[TYPE_STRING_NAME(foo)] expected to equal [\"foo\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_input_sender.gd.TestCreateKeyEvents": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 9
    },
    "tests": {
     "test_echo_key_returns_self": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<RefCounted#-9223370111316904377>(input_sender.gd)] expected to equal [<RefCounted#-9223370111316904377>(input_sender.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_echoed_key_is_a_dupe": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[InputEventKey: keycode=65 (A), mods=none, physical=false, pressed=true, echo=false] expected to not equal [InputEventKey: keycode=65 (A), mods=none, physical=false, pressed=true, echo=true]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_if_no_last_key_echo_does_nothing": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_key_down_returns_self": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<RefCounted#-9223370112222871076>(input_sender.gd)] expected to equal [<RefCounted#-9223370112222871076>(input_sender.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_key_down_sends_event": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[81] expected to equal [81]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_key_echo_is_an_echo": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_key_echo_sends_a_duplicate_of_last_key": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_key_up_returns_self": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<RefCounted#-9223370112575200897>(input_sender.gd)] expected to equal [<RefCounted#-9223370112575200897>(input_sender.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_key_up_sends_event": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[67] expected to equal [67]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_input_sender.gd.TestHoldFor": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 3
    },
    "tests": {
     "test_action_hold_for": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  input size",
       "jump pressed is action 0",
       "jump released is action 1"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_key_hold_for": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  input size",
       "f pressed is action 0"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_mouse_left_hold_for": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  input size",
       "left mouse pressed",
       "left mouse released"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_input_sender.gd.TestMouseButtons": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 5
    },
    "tests": {
     "test_double_click": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Vector2(22, 22)] expected to equal [Vector2(22, 22)]:  event sent",
       "[<RefCounted#-9223370109504965244>(input_sender.gd)] expected to equal [<RefCounted#-9223370109504965244>(input_sender.gd)]:  self returned"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_lmb_down": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Vector2(22, 22)] expected to equal [Vector2(22, 22)]:  event sent",
       "[<RefCounted#-9223370109941172860>(input_sender.gd)] expected to equal [<RefCounted#-9223370109941172860>(input_sender.gd)]:  self returned"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_lmb_up": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Vector2(22, 22)] expected to equal [Vector2(22, 22)]:  event sent",
       "[<RefCounted#-9223370109723069052>(input_sender.gd)] expected to equal [<RefCounted#-9223370109723069052>(input_sender.gd)]:  self returned"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_rmb_down": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Vector2(22, 22)] expected to equal [Vector2(22, 22)]:  event sent",
       "[<RefCounted#-9223370109286861436>(input_sender.gd)] expected to equal [<RefCounted#-9223370109286861436>(input_sender.gd)]:  self returned"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_rmb_up": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Vector2(22, 22)] expected to equal [Vector2(22, 22)]:  event sent",
       "[<RefCounted#-9223370109068757628>(input_sender.gd)] expected to equal [<RefCounted#-9223370109068757628>(input_sender.gd)]:  self returned"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_input_sender.gd.TestMouseMotion": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 8
    },
    "tests": {
     "test_mouse_motion_returns_self": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<RefCounted#-9223370108414442007>(input_sender.gd)] expected to equal [<RefCounted#-9223370108414442007>(input_sender.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_mouse_motion_sends_event": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Vector2(100, 100)] expected to equal [Vector2(100, 100)]:  position",
       "[Vector2(50, 50)] expected to equal [Vector2(50, 50)]:  global_position"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_mouse_relative_motion_sends_event": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Vector2(100, 100)] expected to equal [Vector2(100, 100)]:  position"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_mouse_relative_motion_sets_speed": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Vector2(1, 1)] expected to equal [Vector2(1, 1)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_mouse_relative_motion_uses_motion_from_last_relative_motion": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Vector2(14, 14)] expected to equal [Vector2(14, 14)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_mouse_relative_motion_uses_motion_from_mouse_motion": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Vector2(13, 13)] expected to equal [Vector2(13, 13)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_mouse_relative_returns_self": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<RefCounted#-9223370108095685219>(input_sender.gd)] expected to equal [<RefCounted#-9223370108095685219>(input_sender.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_mouse_set_position_sets_last_mouse_motion": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Vector2(15, 15)] expected to equal [Vector2(15, 15)]:  position",
       "[Vector2(25, 25)] expected to equal [Vector2(25, 25)]:  global_position"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_input_sender.gd.TestReleaseAll": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 6
    },
    "tests": {
     "test_release_action": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "jump should have been released"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_release_all_does_not_release_actions_released": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_release_all_does_not_release_keys_released": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_release_all_does_not_release_mouse_buttons_released": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_release_key": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "key f should not be pressed anymore"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_release_mouse_button": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_input_sender.gd.TestSendEvent": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 8
    },
    "tests": {
     "test_does_not_send_immediately_when_accumulate_and_not_auto_flushing_34": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Skipping 4.0.0 is not 3.4"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_send_event_returns_self": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<RefCounted#-9223370106887717115>(input_sender.gd)] expected to equal [<RefCounted#-9223370106887717115>(input_sender.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_sends_event_to_gui_input": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[InputEventKey: keycode=(Unset), mods=none, physical=false, pressed=false, echo=false] expected to equal [InputEventKey: keycode=(Unset), mods=none, physical=false, pressed=false, echo=false]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_sends_event_to_input": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[InputEventKey: keycode=(Unset), mods=none, physical=false, pressed=false, echo=false] expected to equal [InputEventKey: keycode=(Unset), mods=none, physical=false, pressed=false, echo=false]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_sends_event_to_multiple_receivers": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[InputEventKey: keycode=(Unset), mods=none, physical=false, pressed=false, echo=false] expected to equal [InputEventKey: keycode=(Unset), mods=none, physical=false, pressed=false, echo=false]:  ",
       "[InputEventKey: keycode=(Unset), mods=none, physical=false, pressed=false, echo=false] expected to equal [InputEventKey: keycode=(Unset), mods=none, physical=false, pressed=false, echo=false]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_sends_event_to_unhandled_input": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[InputEventKey: keycode=(Unset), mods=none, physical=false, pressed=false, echo=false] expected to equal [InputEventKey: keycode=(Unset), mods=none, physical=false, pressed=false, echo=false]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_works_if_gui_event_missing": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "we got here"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_works_if_no_input_methods_exist_on_object": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "we got here"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_input_sender.gd.TestSequence": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 7
    },
    "tests": {
     "test_can_wait_frames": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  first input sent",
       "[2] expected to equal [2]:  second input sent",
       "[3] expected to equal [3]:  last input sent"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_emits_signal_when_play_ends": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected object <RefCounted#-9223370105109338497>(input_sender.gd) to have emitted signal [idle]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_mouse_relative_motion_works_with_waits": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[Vector2(6, 6)] expected to equal [Vector2(6, 6)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_non_delayed_events_happen_on_the_same_frame_when_delayed_frames": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[20] expected to equal [20]:  ",
       "[65] expected to equal [65]:  ",
       "[66] expected to equal [66]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_non_delayed_events_happen_on_the_same_frame_when_delayed_seconds": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[61] expected to equal [61]:  ",
       "[65] expected to equal [65]:  ",
       "[66] expected to equal [66]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_playback_adds_delays": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  first input sent",
       "[2] expected to equal [2]:  second input sent",
       "[3] expected to equal [3]:  last input sent"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_recoding_events_are_not_sent": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<null>] to be NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_input_sender.gd.TestTheBasics": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 23
    },
    "tests": {
     "test_add_receiver": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([<Node#1904314692362>]) == Array([<Node#1904314692362>])  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_init_with_a_receiver": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([<Node#1904499242836>]) == Array([<Node#1904499242836>])  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_make_one": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<RefCounted#-9223370132925959863>(input_sender.gd)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_does_not_warn_for_action_up": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_does_not_warn_for_key_echos": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_does_not_warn_for_mouse_up": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_does_now_warn_for_key_up": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_idle_by_default": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_action_pressed_false_by_default": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_action_pressed_true_when_action_sent": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_idle_when_an_event_sent_without_wait": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_key_pressed_false_by_default": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_key_pressed_true_when_sent_key": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_mouse_button_pressed_false_by_default": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_mouse_button_pressed_true_when_button_sent": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_not_idle_when_items_in_queue": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_set_get_auto_flush_input": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "<RefCounted#-9223370132808514284>(input_sender.gd) should have getter starting with get_ or is_",
       "<RefCounted#-9223370132808514284>(input_sender.gd) should have method: set_auto_flush_input",
       "[false] expected to equal [false]:  It should have the expected default value.",
       "[true] expected to equal [true]:  The set value should have been returned."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_wait_parses_frames": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [wait_frames] to have been called on <RefCounted#-9223370116618505045>(double of input_sender.gd)"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_wait_parses_seconds": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [wait_secs] to have been called on <RefCounted#-9223370123748823378>(double of input_sender.gd)"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_warns_for_2nd_down_event_after_idle": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_warns_when_action_down_for_a_pressed_action": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_warns_when_key_down_for_a_pressed_key": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_warns_when_mouse_down_for_a_pressed_mouse_button": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_junit_xml_export.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 4
    },
    "tests": {
     "test_can_make_one": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<RefCounted#-9223370094539685263>(junit_xml_export.gd)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_no_tests_returns_valid_xml": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[18] expected to equal [18]:  Parsing xml should reach EOF"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_spot_check": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[18] expected to equal [18]:  Parsing xml should reach EOF"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_write_file_creates_file": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "expected [user://test_junit_exporter.xml] to contain data"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_logger.gd": {
    "props": {
     "failures": 0,
     "pending": 1,
     "tests": 15
    },
    "tests": {
     "test_can_debug": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_deprecate": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_enable_disable_types": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "debug should be enabled by default",
       "debug should now be disabled",
       "deprecated should be enabled by default",
       "deprecated should now be disabled",
       "error should be enabled by default",
       "error should now be disabled",
       "failed should be enabled by default",
       "failed should now be disabled",
       "info should be enabled by default",
       "info should now be disabled",
       "normal should be enabled by default",
       "normal should now be disabled",
       "orphan should be enabled by default",
       "orphan should now be disabled",
       "passed should be enabled by default",
       "passed should now be disabled",
       "pending should be enabled by default",
       "pending should now be disabled",
       "warn should be enabled by default",
       "warn should now be disabled"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_error": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_get_count_using_type": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  count debug",
       "[1] expected to equal [1]:  count warnings"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_info": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_warn": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_clear_clears_all_buffers": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  debug",
       "[0] expected to equal [0]:  info",
       "[0] expected to equal [0]:  error",
       "[0] expected to equal [0]:  warnings",
       "[0] expected to equal [0]:  deprecated"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_dec_indent_decreases": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[7] expected to equal [7]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_dec_indent_does_not_go_below_0": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  does not go below 0"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_count_with_no_parameter_returns_count_of_all_logs": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[5] expected to equal [5]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_set_gut": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [
       "pending in 4.0"
      ],
      "status": "pending"
     },
     "test_get_set_indent_level": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "<RefCounted#-9223370085798760529>(logger.gd) should have getter starting with get_ or is_",
       "<RefCounted#-9223370085798760529>(logger.gd) should have method: set_indent_level",
       "[0] expected to equal [0]:  It should have the expected default value.",
       "[10] expected to equal [10]:  The set value should have been returned."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_set_indent_string": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "<RefCounted#-9223370085261889165>(logger.gd) should have getter starting with get_ or is_",
       "<RefCounted#-9223370085261889165>(logger.gd) should have method: set_indent_string",
       "[\"    \"] expected to equal [\"    \"]:  It should have the expected default value.",
       "[\"\t\"] expected to equal [\"\t\"]:  The set value should have been returned."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_inc_indent": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_method_maker.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/unit/test_method_maker.gd.TestGetDecleration": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 2
    },
    "tests": {
     "test_get_function_text_no_params": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected 'func dummy():\n\t__gutdbl.spy_on('dummy', [])\n\tif(__gutdbl.should_call_super('dummy', [])):\n\t\treturn await super()\n\telse:\n\t\treturn __gutdbl.get_stubbed_return('dummy', [])\n' to contain 'func dummy():', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_parameters_get_prefix_and_default_to_call_stubber": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected 'func dummy(p_value1=__gutdbl.default_val(\"dummy\",0), p_value2=__gutdbl.default_val(\"dummy\",1)):\n\t__gutdbl.spy_on('dummy', [p_value1, p_value2])\n\tif(__gutdbl.should_call_super('dummy', [p_value1, p_value2])):\n\t\treturn await super(p_value1, p_value2)\n\telse:\n\t\treturn __gutdbl.get_stubbed_return('dummy', [p_value1, p_value2])\n' to contain 'func dummy(p_value1=__gutdbl.default_val(\"dummy\",0), p_value2=__gutdbl.default_val(\"dummy\",1)):', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_method_maker.gd.TestOverrideParameterList": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 5
    },
    "tests": {
     "test_all_parameters_are_defaulted_to_null": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected 'func foo(p_arg0=__gutdbl.default_val(\"foo\",0), p_arg1=__gutdbl.default_val(\"foo\",1), p_arg2=__gutdbl.default_val(\"foo\",2), p_arg3=__gutdbl.default_val(\"foo\",3), p_arg4=__gutdbl.default_val(\"foo\",4)):\n\t__gutdbl.spy_on('foo', [p_arg0, p_arg1, p_arg2, p_arg3, p_arg4])\n\tif(__gutdbl.should_call_super('foo', [p_arg0, p_arg1, p_arg2, p_arg3, p_arg4])):\n\t\treturn await super(p_arg0, p_arg1, p_arg2, p_arg3, p_arg4)\n\telse:\n\t\treturn __gutdbl.get_stubbed_return('foo', [p_arg0, p_arg1, p_arg2, p_arg3, p_arg4])\n' to contain 'p_arg0=__gutdbl.default_val(\"foo\",0)', match_case=true",
       "Expected 'func foo(p_arg0=__gutdbl.default_val(\"foo\",0), p_arg1=__gutdbl.default_val(\"foo\",1), p_arg2=__gutdbl.default_val(\"foo\",2), p_arg3=__gutdbl.default_val(\"foo\",3), p_arg4=__gutdbl.default_val(\"foo\",4)):\n\t__gutdbl.spy_on('foo', [p_arg0, p_arg1, p_arg2, p_arg3, p_arg4])\n\tif(__gutdbl.should_call_super('foo', [p_arg0, p_arg1, p_arg2, p_arg3, p_arg4])):\n\t\treturn await super(p_arg0, p_arg1, p_arg2, p_arg3, p_arg4)\n\telse:\n\t\treturn __gutdbl.get_stubbed_return('foo', [p_arg0, p_arg1, p_arg2, p_arg3, p_arg4])\n' to contain 'p_arg4=__gutdbl.default_val(\"foo\",4)', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_function_text_includes_multiple_override_paramters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected 'func foo(p_arg0=__gutdbl.default_val(\"foo\",0), p_arg1=__gutdbl.default_val(\"foo\",1), p_arg2=__gutdbl.default_val(\"foo\",2), p_arg3=__gutdbl.default_val(\"foo\",3), p_arg4=__gutdbl.default_val(\"foo\",4)):\n\t__gutdbl.spy_on('foo', [p_arg0, p_arg1, p_arg2, p_arg3, p_arg4])\n\tif(__gutdbl.should_call_super('foo', [p_arg0, p_arg1, p_arg2, p_arg3, p_arg4])):\n\t\treturn await super(p_arg0, p_arg1, p_arg2, p_arg3, p_arg4)\n\telse:\n\t\treturn __gutdbl.get_stubbed_return('foo', [p_arg0, p_arg1, p_arg2, p_arg3, p_arg4])\n' to contain 'p_arg0=', match_case=true",
       "Expected 'func foo(p_arg0=__gutdbl.default_val(\"foo\",0), p_arg1=__gutdbl.default_val(\"foo\",1), p_arg2=__gutdbl.default_val(\"foo\",2), p_arg3=__gutdbl.default_val(\"foo\",3), p_arg4=__gutdbl.default_val(\"foo\",4)):\n\t__gutdbl.spy_on('foo', [p_arg0, p_arg1, p_arg2, p_arg3, p_arg4])\n\tif(__gutdbl.should_call_super('foo', [p_arg0, p_arg1, p_arg2, p_arg3, p_arg4])):\n\t\treturn await super(p_arg0, p_arg1, p_arg2, p_arg3, p_arg4)\n\telse:\n\t\treturn __gutdbl.get_stubbed_return('foo', [p_arg0, p_arg1, p_arg2, p_arg3, p_arg4])\n' to contain 'p_arg4=', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_function_text_includes_override_paramters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected 'func foo(p_arg0=__gutdbl.default_val(\"foo\",0)):\n\t__gutdbl.spy_on('foo', [p_arg0])\n\tif(__gutdbl.should_call_super('foo', [p_arg0])):\n\t\treturn await super(p_arg0)\n\telse:\n\t\treturn __gutdbl.get_stubbed_return('foo', [p_arg0])\n' to contain 'p_arg0=', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_spy_paramters_include_overrides": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected 'func foo(p_value1=__gutdbl.default_val(\"foo\",0), p_arg1=__gutdbl.default_val(\"foo\",1)):\n\t__gutdbl.spy_on('foo', [p_value1, p_arg1])\n\tif(__gutdbl.should_call_super('foo', [p_value1, p_arg1])):\n\t\treturn await super(p_value1, p_arg1)\n\telse:\n\t\treturn __gutdbl.get_stubbed_return('foo', [p_value1, p_arg1])\n' to contain '_gutdbl.spy_on('foo', [p_value1, p_arg1]', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_super_call_uses_overrides": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected 'func foo(p_value1=__gutdbl.default_val(\"foo\",0), p_arg1=__gutdbl.default_val(\"foo\",1)):\n\t__gutdbl.spy_on('foo', [p_value1, p_arg1])\n\tif(__gutdbl.should_call_super('foo', [p_value1, p_arg1])):\n\t\treturn await super(p_value1, p_arg1)\n\telse:\n\t\treturn __gutdbl.get_stubbed_return('foo', [p_value1, p_arg1])\n' to contain 'super(p_value1, p_arg1)', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_method_maker.gd.TestSuperCall": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 2
    },
    "tests": {
     "test_super_call_contains_all_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected 'func dummy(p_value1=__gutdbl.default_val(\"dummy\",0), p_value2=__gutdbl.default_val(\"dummy\",1), p_value3=__gutdbl.default_val(\"dummy\",2)):\n\t__gutdbl.spy_on('dummy', [p_value1, p_value2, p_value3])\n\tif(__gutdbl.should_call_super('dummy', [p_value1, p_value2, p_value3])):\n\t\treturn await super(p_value1, p_value2, p_value3)\n\telse:\n\t\treturn __gutdbl.get_stubbed_return('dummy', [p_value1, p_value2, p_value3])\n' to contain 'return await super(p_value1, p_value2, p_value3)', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_super_call_works_with_no_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected 'func dummy():\n\t__gutdbl.spy_on('dummy', [])\n\tif(__gutdbl.should_call_super('dummy', [])):\n\t\treturn await super()\n\telse:\n\t\treturn __gutdbl.get_stubbed_return('dummy', [])\n' to contain 'return await super()', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_one_to_many.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 8
    },
    "tests": {
     "test_can_add_one": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_make_one": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<RefCounted#-9223370079859629449>(one_to_many.gd)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_clear": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[3] expected to equal [3]:  check before clear",
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_has": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "has two/two-2",
       "does not exist"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_ignores_duplicate_many": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_size": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_size_when_name_does_not_exist_returns_0": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_size_with_name": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[3] expected to equal [3]:  checking one",
       "[1] expected to equal [1]:  checking two"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_orphan_counter.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 6
    },
    "tests": {
     "test_adding_same_name_overwrites_prev_start_val": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[8] expected to equal [8]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_add_get_counter": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[4] expected to equal [4]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_make_one": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<RefCounted#-9223370078869772621>(orphan_counter.gd)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_getting_count_for_names_that_dne_returns_neg_1": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[-1] expected to equal [-1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_print_plural_orphans": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected '4 new orphans in one.' to contain 'orphans', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_print_singular_orphan": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected '1 new orphan in one.' to contain 'orphan', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_parameter_factory.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/unit/test_parameter_factory.gd.TestNamedParameters": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 5
    },
    "tests": {
     "test_creates_array_of_dictionaries": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [typeof({ \"a\": 1, \"b\": 2 }) = 27(Dictionary)] to equal [27(Dictionary)].  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fills_in_gaps_when_param_is_not_array": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[3] expected to equal [3]:  size",
       "Expected [<null>] to be NULL:  b is null"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_gets_what_you_expect_back": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  0.a",
       "[\"three\"] expected to equal [\"three\"]:  1.c",
       "[\"five\"] expected to equal [\"five\"]:  2.b",
       "[4] expected to equal [4]:  2.a"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_less_names_than_values_values_are_ignored": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_less_values_then_nulls_are_filled_in": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[3] expected to equal [3]:  size",
       "Expected [<null>] to be NULL:  c is null"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_parameter_handler.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 9
    },
    "tests": {
     "test_can_get_parsed_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_make_one": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<RefCounted#-9223370039460088209>(parameter_handler.gd)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_has_logger": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "<RefCounted#-9223370038721894631>(parameter_handler.gd) should have method: get_logger",
       "<RefCounted#-9223370038721894631>(parameter_handler.gd) should have method: set_logger",
       "Expected [<RefCounted#-9223370038705116454>(logger.gd)] to be anything but NULL:  Default logger not null.",
       "[<RefCounted#-9223370030366840241>(double of logger.gd)] expected to equal [<RefCounted#-9223370030366840241>(double of logger.gd)]:  Set/get works"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_done_is_false_by_default": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_done_is_false_when_parameters_remain": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_done_is_true_when_parameters_exhaused": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passing_non_array_to_constructor_causes_error": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Should have 1 errors."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_subsequent_calls_moves_through_array": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[3] expected to equal [3]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_invalid_constructor_parameter_object_is_setup_correctly": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<null>] to be NULL:  ",
       "is_done should be true"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_print.gd": {
    "props": {
     "failures": 4,
     "pending": 0,
     "tests": 11
    },
    "tests": {
     "test_all_passing": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  output test, should all pass.",
       "[3] expected to equal [3]:  output test, should all pass.",
       "[5] expected to equal [5]:  output test, should all pass."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_await": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [

      ],
      "status": "no asserts"
     },
     "test_basic_array": {
      "failing": [
       "(call #2) [2] expected to equal [1]:  output test may fail\n      at line 47",
       "(call #4) [4] expected to equal [1]:  output test may fail\n      at line 47"
      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  output test may fail",
       "[1] expected to equal [1]:  output test may fail"
      ],
      "pending": [

      ],
      "status": "fail"
     },
     "test_multiple_failing_no_params": {
      "failing": [
       "failing test one\n      at line 43",
       "failing test two\n      at line 44"
      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [

      ],
      "status": "fail"
     },
     "test_multiple_passing_no_params": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "passing test one",
       "passing test two"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_no_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "this passes"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_print_multiple_lines": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [

      ],
      "status": "no asserts"
     },
     "test_print_non_strings": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [

      ],
      "status": "no asserts"
     },
     "test_show_error": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_show_info": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_show_warning": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_print.gd.TestBasicLoggerOutput": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 2
    },
    "tests": {
     "test_indent_levels": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_indent_with_new_lines": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_print.gd.TestGuiOutput": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/unit/test_print.gd.TestLogLevels": {
    "props": {
     "failures": 6,
     "pending": 0,
     "tests": 2
    },
    "tests": {
     "test_log_types_at_levels_with_failing_test": {
      "failing": [
       "(call #1) this should fail (-2)\n      at line 147",
       "(call #2) this should fail (-1)\n      at line 147",
       "(call #3) this should fail (0)\n      at line 147",
       "(call #4) this should fail (1)\n      at line 147",
       "(call #5) this should fail (2)\n      at line 147",
       "(call #6) this should fail (3)\n      at line 147"
      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [

      ],
      "status": "fail"
     },
     "test_log_types_at_levels_with_passing_test": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "this should pass",
       "this should pass",
       "this should pass",
       "this should pass",
       "this should pass",
       "this should pass"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_result_exporter.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 22
    },
    "tests": {
     "test_can_make_one": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<RefCounted#-9223370024276713062>(result_exporter.gd)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_result_has_testsuites_entry": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [Dictionary({ \"test_scripts\": { \"props\": { \"pending\": 0, \"failures\": 0, \"passing\": 0, \"tests\": 0, \"time\": 0, \"orphans\": 0, \"errors\": 0, \"warnings\": 0 }, \"scripts\": {  } } })] to contain value:  [\"test_scripts\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_script_has_prop_values": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [Dictionary({ \"tests\": 8, \"pending\": 2, \"failures\": 4 })] to contain value:  [\"tests\"]:  ",
       "Expected [Dictionary({ \"tests\": 8, \"pending\": 2, \"failures\": 4 })] to contain value:  [\"pending\"]:  ",
       "Expected [Dictionary({ \"tests\": 8, \"pending\": 2, \"failures\": 4 })] to contain value:  [\"failures\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_script_has_proper_prop_values": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[8] expected to equal [8]:  test count",
       "[2] expected to equal [2]:  pending count",
       "[4] expected to equal [4]:  failures"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_script_has_proper_prop_values_for_2nd_script": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[3] expected to equal [3]:  test count",
       "[1] expected to equal [1]:  pending count",
       "[1] expected to equal [1]:  failures"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_script_has_props": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [Dictionary({ \"props\": { \"tests\": 8, \"pending\": 2, \"failures\": 4 }, \"tests\": { \"test_pass_1\": { \"status\": \"pass\", \"passing\": [\"[\\\"one\\\"] expected to equal [\\\"one\\\"]:  \"], \"failing\": [], \"pending\": [], \"orphans\": 0 }, \"test_pass_2\": { \"status\": \"pass\", \"passing\": [\"[\\\"two\\\"] expected to equal [\\\"two\\\"]:  \"], \"failing\": [], \"pending\": [], \"orphans\": 0 }, \"test_fail_1\": { \"status\": \"fail\", \"passing\": [], \"failing\": [\"Cannot compare Int[1] to String[\\\"two\\\"].  \\n      at line 10\"], \"pending\": [], \"orphans\": 0 }, \"test_fail_2\": { \"status\": \"fail\", \"passing\": [], \"failing\": [\"Cannot compare String[\\\"two\\\"] to Int[2].  \\n      at line 13\"], \"pending\": [], \"orphans\": 0 }, \"test_pending_no_text\": { \"status\": \"pending\", \"passing\": [], \"failing\": [], \"pending\": [\"\"], \"orphans\": 0 }, \"test_pending_with_text\": { \"status\": \"pending\", \"passing\": [], \"failing\": [], \"pending\": [\"this has text\"], \"orphans\": 0 }, \"test_parameterized_passing\": { \"status\": \"pass\", \"passing\": [\"[1] expected to be > than [0]:  \", \"[2] expected to be > than [0]:  \", \"[3] expected to be > than [0]:  \", \"[4] expected to be > than [0]:  \"], \"failing\": [], \"pending\": [], \"orphans\": 0 }, \"test_parameterized_failing\": { \"status\": \"fail\", \"passing\": [], \"failing\": [\"(call #1) [1] expected to equal [2]:  \\n      at line 25\", \"(call #2) [3] expected to equal [4]:  \\n      at line 25\"], \"pending\": [], \"orphans\": 0 } } })] to contain value:  [\"props\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_script_has_tests": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [Dictionary({ \"props\": { \"tests\": 3, \"pending\": 1, \"failures\": 1 }, \"tests\": { \"test_pass\": { \"status\": \"pass\", \"passing\": [\"[\\\"one\\\"] expected to equal [\\\"one\\\"]:  \"], \"failing\": [], \"pending\": [], \"orphans\": 0 }, \"test_fail\": { \"status\": \"fail\", \"passing\": [], \"failing\": [\"Cannot compare Int[1] to String[\\\"two\\\"].  \\n      at line 7\"], \"pending\": [], \"orphans\": 0 }, \"test_pending\": { \"status\": \"pending\", \"passing\": [], \"failing\": [], \"pending\": [\"this has text\"], \"orphans\": 0 } } })] to contain value:  [\"tests\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_script_totals_with_inner_classes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  pending",
       "[1] expected to equal [1]:  failures",
       "[3] expected to equal [3]:  tests"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_scripts_has_script_run": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [Dictionary({ \"res://test/resources/exporter_test_files/test_simple.gd\": { \"props\": { \"tests\": 8, \"pending\": 2, \"failures\": 4 }, \"tests\": { \"test_pass_1\": { \"status\": \"pass\", \"passing\": [\"[\\\"one\\\"] expected to equal [\\\"one\\\"]:  \"], \"failing\": [], \"pending\": [], \"orphans\": 0 }, \"test_pass_2\": { \"status\": \"pass\", \"passing\": [\"[\\\"two\\\"] expected to equal [\\\"two\\\"]:  \"], \"failing\": [], \"pending\": [], \"orphans\": 0 }, \"test_fail_1\": { \"status\": \"fail\", \"passing\": [], \"failing\": [\"Cannot compare Int[1] to String[\\\"two\\\"].  \\n      at line 10\"], \"pending\": [], \"orphans\": 0 }, \"test_fail_2\": { \"status\": \"fail\", \"passing\": [], \"failing\": [\"Cannot compare String[\\\"two\\\"] to Int[2].  \\n      at line 13\"], \"pending\": [], \"orphans\": 0 }, \"test_pending_no_text\": { \"status\": \"pending\", \"passing\": [], \"failing\": [], \"pending\": [\"\"], \"orphans\": 0 }, \"test_pending_with_text\": { \"status\": \"pending\", \"passing\": [], \"failing\": [], \"pending\": [\"this has text\"], \"orphans\": 0 }, \"test_parameterized_passing\": { \"status\": \"pass\", \"passing\": [\"[1] expected to be > than [0]:  \", \"[2] expected to be > than [0]:  \", \"[3] expected to be > than [0]:  \", \"[4] expected to be > than [0]:  \"], \"failing\": [], \"pending\": [], \"orphans\": 0 }, \"test_parameterized_failing\": { \"status\": \"fail\", \"passing\": [], \"failing\": [\"(call #1) [1] expected to equal [2]:  \\n      at line 25\", \"(call #2) [3] expected to equal [4]:  \\n      at line 25\"], \"pending\": [], \"orphans\": 0 } } } })] to contain value:  [\"res://test/resources/exporter_test_files/test_simple.gd\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_spot_check": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Check output"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_test_has_status_field": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [Dictionary({ \"status\": \"pass\", \"passing\": [\"[\\\"one\\\"] expected to equal [\\\"one\\\"]:  \"], \"failing\": [], \"pending\": [], \"orphans\": 0 })] to contain value:  [\"status\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_test_has_text_fields": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [Dictionary({ \"status\": \"pass\", \"passing\": [\"[\\\"one\\\"] expected to equal [\\\"one\\\"]:  \"], \"failing\": [], \"pending\": [], \"orphans\": 0 })] to contain value:  [\"passing\"]:  ",
       "Expected [Dictionary({ \"status\": \"pass\", \"passing\": [\"[\\\"one\\\"] expected to equal [\\\"one\\\"]:  \"], \"failing\": [], \"pending\": [], \"orphans\": 0 })] to contain value:  [\"failing\"]:  ",
       "Expected [Dictionary({ \"status\": \"pass\", \"passing\": [\"[\\\"one\\\"] expected to equal [\\\"one\\\"]:  \"], \"failing\": [], \"pending\": [], \"orphans\": 0 })] to contain value:  [\"pending\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_test_script_props_has_props": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [Dictionary({ \"pending\": 0, \"failures\": 0, \"passing\": 0, \"tests\": 0, \"time\": 0, \"orphans\": 0, \"errors\": 0, \"warnings\": 0 })] to contain value:  [\"pending\"]:  ",
       "Expected [Dictionary({ \"pending\": 0, \"failures\": 0, \"passing\": 0, \"tests\": 0, \"time\": 0, \"orphans\": 0, \"errors\": 0, \"warnings\": 0 })] to contain value:  [\"failures\"]:  ",
       "Expected [Dictionary({ \"pending\": 0, \"failures\": 0, \"passing\": 0, \"tests\": 0, \"time\": 0, \"orphans\": 0, \"errors\": 0, \"warnings\": 0 })] to contain value:  [\"tests\"]:  ",
       "Expected [Dictionary({ \"pending\": 0, \"failures\": 0, \"passing\": 0, \"tests\": 0, \"time\": 0, \"orphans\": 0, \"errors\": 0, \"warnings\": 0 })] to contain value:  [\"errors\"]:  ",
       "Expected [Dictionary({ \"pending\": 0, \"failures\": 0, \"passing\": 0, \"tests\": 0, \"time\": 0, \"orphans\": 0, \"errors\": 0, \"warnings\": 0 })] to contain value:  [\"warnings\"]:  ",
       "Expected [Dictionary({ \"pending\": 0, \"failures\": 0, \"passing\": 0, \"tests\": 0, \"time\": 0, \"orphans\": 0, \"errors\": 0, \"warnings\": 0 })] to contain value:  [\"orphans\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_test_script_props_have_values_for_one_script": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  pending",
       "[4] expected to equal [4]:  failures",
       "[8] expected to equal [8]:  tests"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_test_script_props_have_values_for_two_script": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[3] expected to equal [3]:  pending",
       "[5] expected to equal [5]:  failures",
       "[11] expected to equal [11]:  tests"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_test_scripts_contains_script": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [Dictionary({ \"props\": { \"pending\": 0, \"failures\": 0, \"passing\": 0, \"tests\": 0, \"time\": 0, \"orphans\": 0, \"errors\": 0, \"warnings\": 0 }, \"scripts\": {  } })] to contain value:  [\"scripts\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_test_scripts_has_props": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [Dictionary({ \"props\": { \"pending\": 0, \"failures\": 0, \"passing\": 0, \"tests\": 0, \"time\": 0, \"orphans\": 0, \"errors\": 0, \"warnings\": 0 }, \"scripts\": {  } })] to contain value:  [\"props\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_test_status_field_has_proper_value": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"pass\"] expected to equal [\"pass\"]:  ",
       "[\"fail\"] expected to equal [\"fail\"]:  ",
       "[\"pending\"] expected to equal [\"pending\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_tests_section_has_tests": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [Dictionary({ \"test_pass\": { \"status\": \"pass\", \"passing\": [\"[\\\"one\\\"] expected to equal [\\\"one\\\"]:  \"], \"failing\": [], \"pending\": [], \"orphans\": 0 }, \"test_fail\": { \"status\": \"fail\", \"passing\": [], \"failing\": [\"Cannot compare Int[1] to String[\\\"two\\\"].  \\n      at line 7\"], \"pending\": [], \"orphans\": 0 }, \"test_pending\": { \"status\": \"pending\", \"passing\": [], \"failing\": [], \"pending\": [\"this has text\"], \"orphans\": 0 } })] to contain value:  [\"test_pass\"]:  ",
       "Expected [Dictionary({ \"test_pass\": { \"status\": \"pass\", \"passing\": [\"[\\\"one\\\"] expected to equal [\\\"one\\\"]:  \"], \"failing\": [], \"pending\": [], \"orphans\": 0 }, \"test_fail\": { \"status\": \"fail\", \"passing\": [], \"failing\": [\"Cannot compare Int[1] to String[\\\"two\\\"].  \\n      at line 7\"], \"pending\": [], \"orphans\": 0 }, \"test_pending\": { \"status\": \"pending\", \"passing\": [], \"failing\": [], \"pending\": [\"this has text\"], \"orphans\": 0 } })] to contain value:  [\"test_fail\"]:  ",
       "Expected [Dictionary({ \"test_pass\": { \"status\": \"pass\", \"passing\": [\"[\\\"one\\\"] expected to equal [\\\"one\\\"]:  \"], \"failing\": [], \"pending\": [], \"orphans\": 0 }, \"test_fail\": { \"status\": \"fail\", \"passing\": [], \"failing\": [\"Cannot compare Int[1] to String[\\\"two\\\"].  \\n      at line 7\"], \"pending\": [], \"orphans\": 0 }, \"test_pending\": { \"status\": \"pending\", \"passing\": [], \"failing\": [], \"pending\": [\"this has text\"], \"orphans\": 0 } })] to contain value:  [\"test_pending\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_totals_with_inner_classes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  pending",
       "[2] expected to equal [2]:  failures",
       "[6] expected to equal [6]:  tests"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_warnings_and_errors_populated": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  errors",
       "[1] expected to equal [1]:  warnings"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_write_file_creates_file": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "expected [user://test_result_exporter.json] to contain data"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_script_parser.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/unit/test_script_parser.gd.TestParsedScript": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 26
    },
    "tests": {
     "test_can_get_local_method_by_name": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<RefCounted#-9223369924150282348>(script_parser.gd/ParsedMethod)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_get_method_by_name": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<RefCounted#-9223369933914619244>(script_parser.gd/ParsedMethod)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_get_super_method_by_name": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<RefCounted#-9223369930978614410>(script_parser.gd/ParsedMethod)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_make_one_from_gdscript": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<RefCounted#-9223369956228325450>(script_parser.gd/ParsedScript)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_make_one_from_instance": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<RefCounted#-9223369953275530234>(script_parser.gd/ParsedScript)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_super_methods_not_included_in_local_method_by_name": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<null>] to be NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_cannot_set_subpath": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<null>] to be NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_extends_text_adds_inner_classes_to_end": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"extends 'res://test/resources/doubler_test_objects/inner_classes.gd'.InnerB.InnerB1\"] expected to equal [\"extends 'res://test/resources/doubler_test_objects/inner_classes.gd'.InnerB.InnerB1\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_extends_text_has_path_for_scripts": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"extends 'res://test/resources/doubler_test_objects/double_me.gd'\"] expected to equal [\"extends 'res://test/resources/doubler_test_objects/double_me.gd'\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_extends_text_uses_class_name_for_natives": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"extends Node2D\"] expected to equal [\"extends Node2D\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_local_method_names_excludes_supers": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [Array([\"_ready\", \"_notification\", \"_init\", \"get_value\", \"set_value\", \"has_one_param\", \"has_two_params_one_default\", \"get_position\", \"has_string_and_array_defaults\", \"this_just_does_an_await\", \"this_is_a_coroutine\", \"calls_coroutine\", \"does_something_then_calls_coroutine_then_does_something_else\", \"might_await\", \"might_await_no_return\", \"uses_await_response\", \"default_is_value\"])] to NOT contain value:  [\"_get\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_super_method_names_excludes_locals": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [Array([\"_process\", \"_physics_process\", \"_enter_tree\", \"_exit_tree\", \"_get_configuration_warnings\", \"_input\", \"_shortcut_input\", \"_unhandled_input\", \"_unhandled_key_input\", \"print_orphan_nodes\", \"add_sibling\", \"set_name\", \"get_name\", \"add_child\", \"remove_child\", \"reparent\", \"get_child_count\", \"get_children\", \"get_child\", \"has_node\", \"get_node\", \"get_node_or_null\", \"get_parent\", \"find_child\", \"find_children\", \"find_parent\", \"has_node_and_resource\", \"get_node_and_resource\", \"is_inside_tree\", \"is_ancestor_of\", \"is_greater_than\", \"get_path\", \"get_path_to\", \"add_to_group\", \"remove_from_group\", \"is_in_group\", \"move_child\", \"get_groups\", \"set_owner\", \"get_owner\", \"get_index\", \"print_tree\", \"print_tree_pretty\", \"set_scene_file_path\", \"get_scene_file_path\", \"propagate_notification\", \"propagate_call\", \"set_physics_process\", \"get_physics_process_delta_time\", \"is_physics_processing\", \"get_process_delta_time\", \"set_process\", \"set_process_priority\", \"get_process_priority\", \"is_processing\", \"set_process_input\", \"is_processing_input\", \"set_process_shortcut_input\", \"is_processing_shortcut_input\", \"set_process_unhandled_input\", \"is_processing_unhandled_input\", \"set_process_unhandled_key_input\", \"is_processing_unhandled_key_input\", \"set_process_mode\", \"get_process_mode\", \"can_process\", \"set_display_folded\", \"is_displayed_folded\", \"set_process_internal\", \"is_processing_internal\", \"set_physics_process_internal\", \"is_physics_processing_internal\", \"get_window\", \"get_tree\", \"create_tween\", \"duplicate\", \"replace_by\", \"set_scene_instance_load_placeholder\", \"get_scene_instance_load_placeholder\", \"set_editable_instance\", \"is_editable_instance\", \"get_viewport\", \"queue_free\", \"request_ready\", \"set_multiplayer_authority\", \"get_multiplayer_authority\", \"is_multiplayer_authority\", \"get_multiplayer\", \"rpc_config\", \"set_editor_description\", \"get_editor_description\", \"_set_import_path\", \"_get_import_path\", \"set_unique_name_in_owner\", \"is_unique_name_in_owner\", \"_set_property_pinned\", \"rpc\", \"rpc_id\", \"update_configuration_warnings\", \"free\", \"_set\", \"_get\", \"_get_property_list\", \"_property_can_revert\", \"_property_get_revert\", \"_to_string\", \"get_class\", \"is_class\", \"set\", \"get\", \"set_indexed\", \"get_indexed\", \"get_property_list\", \"get_method_list\", \"property_can_revert\", \"property_get_revert\", \"notification\", \"to_string\", \"get_instance_id\", \"set_script\", \"get_script\", \"set_meta\", \"remove_meta\", \"get_meta\", \"has_meta\", \"get_meta_list\", \"add_user_signal\", \"has_user_signal\", \"emit_signal\", \"call\", \"call_deferred\", \"set_deferred\", \"callv\", \"has_method\", \"has_signal\", \"get_signal_list\", \"get_signal_connection_list\", \"get_incoming_connections\", \"connect\", \"disconnect\", \"is_connected\", \"set_block_signals\", \"is_blocking_signals\", \"notify_property_list_changed\", \"set_message_translation\", \"can_translate_messages\", \"tr\", \"tr_n\", \"is_queued_for_deletion\"])] to NOT contain value:  [\"has_string_and_array_defaults\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_instance_and_gdscript_have_same_methods": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([\"_enter_tree\", \"_exit_tree\", \"_get\", \"_get_configuration_warnings\", \"_get_import_pa...esponse\"]) == Array([\"_enter_tree\", \"_exit_tree\", \"_get\", \"_get_configuration_warnings\", \"_get_import_pa...esponse\"])  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_black_listed_returns_false_for_non_blacklisted_methods": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_black_listed_returns_null_for_methods_that_DNE": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<null>] to be NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_blacklisted_returns_true_for_blacklisted_methods": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_new_from_gdscript_sets_path": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"res://test/resources/doubler_test_objects/double_me.gd\"] expected to equal [\"res://test/resources/doubler_test_objects/double_me.gd\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_new_from_inst_sets_path": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"res://test/resources/doubler_test_objects/double_me.gd\"] expected to equal [\"res://test/resources/doubler_test_objects/double_me.gd\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_non_super_methods_are_not_in_get_super_method_by_name": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<null>] to be NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_overloaded_local_methods_are_local": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<RefCounted#-9223369918378926663>(script_parser.gd/ParsedMethod)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_parsing_native_does_not_generate_orphans": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "No new orphans found."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_resource_is_loaded_inner": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<GDScript#-9223371957532095628>] expected to equal [<GDScript#-9223371957532095628>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_resource_is_loaded_script": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<GDScript#-9223371958706500759>] expected to equal [<GDScript#-9223371958706500759>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_subpath_is_null_by_default": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<null>] to be NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_subpath_set_for_deeper_inner_classes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"InnerB.InnerB1\"] expected to equal [\"InnerB.InnerB1\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_subpath_set_when_passing_inner_and_parent": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"InnerA\"] expected to equal [\"InnerA\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_script_parser.gd.TestScriptCollector": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 11
    },
    "tests": {
     "test_can_get_instance_parse_result_from_gdscript": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<RefCounted#-9223369972720328891>(script_parser.gd/ParsedScript)] to extend [<GDScript#-9223372001521957585>]: ",
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_make_one": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<RefCounted#-9223369984665698968>(script_parser.gd)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_parse_a_script": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_parse_path_string": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_inner_class_sets_script_path": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"res://test/resources/doubler_test_objects/inner_classes.gd\"] expected to equal [\"res://test/resources/doubler_test_objects/inner_classes.gd\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_inner_class_sets_subpath": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"InnerCA\"] expected to equal [\"InnerCA\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_parse_returns_cached_version_on_2nd_parse": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<RefCounted#-9223369975689887643>(script_parser.gd/ParsedScript)] to extend [<GDScript#-9223372001521957585>]: "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_parse_returns_script_parser": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<RefCounted#-9223369978642683974>(script_parser.gd/ParsedScript)] to extend [<GDScript#-9223372001521957585>]: "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_parsing_more_adds_more_scripts": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_parsing_same_thing_does_not_add_to_scripts": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_passed_an_invalid_path_null_is_returned": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<null>] to be NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_signal_watcher.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 32
    },
    "tests": {
     "test_can_get_parameters_sent_when_signal_emitted_with_no_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([]) == Array([])  It should return an empty array"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_get_params_for_a_specific_emission_of_signal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([\"second\"]) == Array([\"second\"])  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_see_script_signals": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_see_script_signals_emit": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_watch_script_signal_explicitly": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_watch_signals_on_multiple_objects": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  gr.so emit twice",
       "[1] expected to equal [1]:  other_so emit once"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_clearing_ignores_freed_objecdts": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [

      ],
      "status": "no asserts"
     },
     "test_get_parameters_returns_null_when_signal_not_fired": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<null>] expected to equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_no_engine_errors_when_signal_does_not_exist": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "This should generate a GUT warning and not an engine error."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_params_returned_default_to_the_most_recent_emission": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([\"second\"]) == Array([\"second\"])  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_watch_signals_ignores_duplicates": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_watch_signals_watches_all_signals_on_an_object": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "it should be watching: no_parameters",
       "it should be watching: one_parameter",
       "it should be watching: two_parameters",
       "it should be watching: some_signal"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_cleared_it_is_not_watching_any_signals": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "it should NOT be watching: no_parameters",
       "it should NOT be watching: one_parameter",
       "it should NOT be watching: two_parameters",
       "it should NOT be watching: some_signal"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_cleared_it_should_disconnect_from_signals": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "it should NOT be connected to: no_parameters",
       "it should NOT be connected to: one_parameter",
       "it should NOT be connected to: two_parameters",
       "it should NOT be connected to: some_signal"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_object_not_watched_null_is_returned": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<null>] expected to equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_object_was_not_being_watched_did_emit_returns_false": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_object_was_not_being_watched_the_count_is_neg_1": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[-1] expected to equal [-1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_passed_non_watched_obj_emitted_signals_is_empty": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_signal_does_exist_then_watch_signal_returns_true": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "It should be watching"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_signal_does_not_exist_watch_signal_returns_false": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "It should not be watching"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_signal_emitted_it_exists_in_list_of_signals_emitted": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [Array([\"no_parameters\", \"some_signal\"])] to contain value:  [\"no_parameters\"]:  ",
       "Expected [Array([\"no_parameters\", \"some_signal\"])] to contain value:  [\"some_signal\"]:  ",
       "[2] expected to equal [2]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_signal_emitted_the_signal_count_is_incremented": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  The signal should have been counted."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_signal_emitted_with_parameters_it_is_counted": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  The signal should have been counted."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_signal_not_watched_null_is_returned": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<null>] expected to equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_signal_was_emitted_did_emit_returns_true": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_signal_was_not_being_watched_did_emit_returns_false": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_signal_was_not_being_watched_the_count_is_neg_1": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[-1] expected to equal [-1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_signal_was_not_emitted_did_emit_returns_false": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_signal_was_not_fired_the_count_is_0": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_some_signal_emitted_with_parameter_it_is_returned": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([\"from_emit\"]) == Array([\"from_emit\"])  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_two_parameter_signal_fired_it_is_counted": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_two_parameter_signal_fired_the_parameters_are_returned": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([1, \"WORD\"]) == Array([1, \"WORD\"])  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_simple.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 1
    },
    "tests": {
     "test_assert_true": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "this is true"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_spy.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/unit/test_spy.gd.TestAddingCallsWithParameters": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 9
    },
    "tests": {
     "test_can_add_call_with_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "no errors, we are all good"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_check_for_calls_with_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_get_parameters_for_first_call": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([1]) == Array([1])  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_get_parameters_for_second_call": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([2]) == Array([2])  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_get_second_call_parameters_when_there_are_multiple_calls": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([10]) == Array([10])  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_performs_deep_compare_of_paramters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_index_out_of_range_then_error_generated_and_null_returned": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<null>] expected to equal [<null>]:  The returned parameters should be null",
       "[1] expected to equal [1]:  generates error"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_method_was_not_called_get_call_parameters_returns_null": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<null>] expected to equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_params_dont_match_was_called_is_false": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_spy.gd.TestGetCallCount": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 5
    },
    "tests": {
     "test_can_get_count_called_with_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_called_multiple_times_the_right_count_is_returned": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[10] expected to equal [10]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_has_been_called_one_returned": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_no_calls_found_call_count_returns_0": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_no_parameters_match_0_returned": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_spy.gd.TestSpy": {
    "props": {
     "failures": 0,
     "pending": 1,
     "tests": 9
    },
    "tests": {
     "test_adding_second_call_does_not_overwrite_first": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_add_call_to_method_on_instance": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "no errors, we are all good"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_add_call_to_method_on_path": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "no errors, we are all good"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_check_if_instance_method_called": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_clear_spies": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  pre count",
       "[0] expected to equal [0]:  post count"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_has_logger": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [
       "pending in 4.0"
      ],
      "status": "pending"
     },
     "test_if_method_was_not_called_then_was_called_returns_false": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_was_called_returns_true_if_path_and_method_were_called": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_was_called_with_no_parameters_returns_true_for_parameterized_calls": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_strutils.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/unit/test_strutils.gd.TestIndent": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 4
    },
    "tests": {
     "test_four_indents_for_single_line": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected '________hello world' to start with '________', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_newlines_with_trailing_newline": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"____hello\n____world\n\"] expected to equal [\"____hello\n____world\n\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_one_indent_for_single_line": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected '  hello world' to start with '  ', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_with_newlines": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"____hello\n____world\"] expected to equal [\"____hello\n____world\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_strutils.gd.TestTruncateString": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 3
    },
    "tests": {
     "test_when_less_than_max_entire_string_returned": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"this is small\"] expected to equal [\"this is small\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_more_than_max_then_string_is_smaller": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[23] expected to be < than [30]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_neg_one_passed_whole_string_is_returned": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"this is some text that I have  typed into here for you to read.\"] expected to equal [\"this is some text that I have  typed into here for you to read.\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_strutils.gd.TestType2Str": {
    "props": {
     "failures": 0,
     "pending": 1,
     "tests": 24
    },
    "tests": {
     "test_another_double": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"<Node2D#2209592913801>(double of double_extends_node2d.gd)\"] expected to equal [\"<Node2D#2209592913801>(double of double_extends_node2d.gd)\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_assert_null": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"<null>\"] expected to equal [\"<null>\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_boolean": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"true\"] expected to equal [\"true\"]:  ",
       "[\"false\"] expected to equal [\"false\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_use_type2str_on_Node": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"Node\"] expected to equal [\"Node\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_use_type2str_on_a_node_instance": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"<Node#2226923781123>\"] expected to equal [\"<Node#2226923781123>\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_color": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"Color(0.1, 0.2, 0.3, 1)\"] expected to equal [\"Color(0.1, 0.2, 0.3, 1)\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_double_inner": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"<RefCounted#-9223369823050782339>(double of inner_classes.gd/InnerA)\"] expected to equal [\"<RefCounted#-9223369823050782339>(double of inner_classes.gd/InnerA)\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_doubles": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"<Node#2185702163435>(double of double_me.gd)\"] expected to equal [\"<Node#2185702163435>(double of double_me.gd)\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_file_instance": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [
       "4.0 This might not need to exist anymore due to FileAccess Changes"
      ],
      "status": "pending"
     },
     "test_float": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"1.234\"] expected to equal [\"1.234\"]:  ",
       "[\"1.0\"] expected to equal [\"1.0\"]:  ",
       "[\"0.1\"] expected to equal [\"0.1\"]:  ",
       "[\"9.87\"] expected to equal [\"9.87\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_inner_class": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"<Control#2226605010990>(test_strutils.gd/TestType2Str/ExtendsControl)\"] expected to equal [\"<Control#2226605010990>(test_strutils.gd/TestType2Str/ExtendsControl)\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_int": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"1234\"] expected to equal [\"1234\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_loaded_scene": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"<PackedScene#-9223371958270293140>(double_me_scene.tscn)\"] expected to equal [\"<PackedScene#-9223371958270293140>(double_me_scene.tscn)\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_memory_leak": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "No new orphans found."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_null": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"<null>\"] expected to equal [\"<null>\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_object_null": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"<null>\"] expected to equal [\"<null>\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_partial_double": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected '<Node#2226135247691>(partial-double of double_me.gd)' to contain 'partial-double', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_returns_null_for_just_freed_objects": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"<Freed Object>\"] expected to equal [\"<Freed Object>\"]:  sometimes fails based on timing."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_scene": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"Node2D:<Node2D#2172850811670>(double_me_scene.gd)\"] expected to equal [\"Node2D:<Node2D#2172850811670>(double_me_scene.gd)\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_script": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"@@630:<Node#2172045501864>(test_strutils.gd/TestType2Str)\"] expected to equal [\"@@630:<Node#2172045501864>(test_strutils.gd/TestType2Str)\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_script_2": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"<Node#2172766926328>(double_me.gd)\"] expected to equal [\"<Node#2172766926328>(double_me.gd)\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_simple_class": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"<RefCounted#-9223369810149104880>(test_strutils.gd/TestType2Str/ExtendsNothing)\"] expected to equal [\"<RefCounted#-9223369810149104880>(test_strutils.gd/TestType2Str/ExtendsNothing)\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_string": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"\"this\"\"] expected to equal [\"\"this\"\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_vector2": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"Vector2(20, 30)\"] expected to equal [\"Vector2(20, 30)\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_stub_params.gd": {
    "props": {
     "failures": 0,
     "pending": 2,
     "tests": 33
    },
    "tests": {
     "test_can_set_to_call_super": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[true] expected to equal [true]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_take_up_to_10_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[10] expected to equal [10]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_draw_parameter_method_meta": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"draw_primitive\"] expected to equal [\"draw_primitive\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_draw_parameter_method_meta2": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [
       "defaults for draw_primitive have changed, need a better fit."
      ],
      "status": "pending"
     },
     "test_draw_parameter_method_meta3": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_draw_parameter_method_meta4": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [
       "Parameters for draw_pimitive have changed. Need a different method to test with"
      ],
      "status": "pending"
     },
     "test_has_param_override_is_false_by_default": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_init_sets_method": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"method\"] expected to equal [\"method\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_init_sets_stub_target": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"thing\"] expected to equal [\"thing\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_paramter_override_only_false_by_default": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_order_of_calls_with_to_return_does_not_matter": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_param_count_default_value": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[-1] expected to equal [-1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_param_count_override_params_sets_flag": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_param_count_returns_self": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<RefCounted#-9223369806290340084>(stub_params.gd)] expected to equal [<RefCounted#-9223369806290340084>(stub_params.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_param_count_sets_param_count": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[3] expected to equal [3]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_param_defaults_returns_self": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<RefCounted#-9223369805887693686>(stub_params.gd)] expected to equal [<RefCounted#-9223369805887693686>(stub_params.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_param_defaults_set_parameter_defaults": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([1, 2, 3]) == Array([1, 2, 3])  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_param_defaults_sets_parameter_count": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[3] expected to equal [3]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_parameter_defaults_is_null_by_default": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<null>] to be NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_parameters_turn_values_into_array": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([1, 2, 3]) == Array([1, 2, 3])  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_setting_defaults_sets_flag": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_to_call_super_returns_self": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<RefCounted#-9223369806827214091>(stub_params.gd)] expected to equal [<RefCounted#-9223369806827214091>(stub_params.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_to_call_super_sets_flag": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_to_do_nothing_returns_self": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<RefCounted#-9223369806625887499>(stub_params.gd)] expected to equal [<RefCounted#-9223369806625887499>(stub_params.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_to_do_nothing_sets_flag": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_to_return_returns_self": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<RefCounted#-9223369808270055312>(stub_params.gd)] expected to equal [<RefCounted#-9223369808270055312>(stub_params.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_to_return_sets_override_flag": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_to_return_sets_return_value": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[7] expected to equal [7]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_turns_paths_into_classes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<GDScript#-9223372000783760078>] expected to equal [<GDScript#-9223372000783760078>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_param_count_set_has_param_override_is_true": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_passed_does_not_set_flag": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_passed_returns_self": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<RefCounted#-9223369807733188364>(stub_params.gd)] expected to equal [<RefCounted#-9223369807733188364>(stub_params.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_passed_sets_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([1]) == Array([1])  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_stubber.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 33
    },
    "tests": {
     "test_can_call_super_for_dne_generates_info": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_get_return_for_multiple_methods": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  method1 returns 1",
       "[2] expected to equal [2]:  method1 returns 2"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_get_return_value": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[7] expected to equal [7]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_get_return_value_using_an_instance_of_class": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_stub_return_with_class": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_stub_with_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[7] expected to equal [7]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_draw_parameter_method_meta": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"a\"] expected to equal [\"a\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_default_value_returns_null_by_default": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<null>] to be NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_default_value_returns_null_when_index_outside_of_range": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<null>] expected to equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_default_value_returns_null_when_only_count_has_been_set": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<null>] expected to equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_default_value_returns_stub_param_value_for_index": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_default_values_finds_values_when_another_stub_exists": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_parameter_count_finds_count_when_another_stub_exists": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[3] expected to equal [3]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_parameter_count_returns_null_by_default": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<null>] to be NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_parameter_count_returns_null_when_param_count_not_set": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<null>] to be NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_parameter_count_returns_stub_params_value": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[3] expected to equal [3]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_getting_return_for_thing_that_does_not_exist_returns_null": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<null>] expected to equal [<null>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_has_logger": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "<RefCounted#-9223369802096032962>(test_stubber.gd/HackedStubber) should have method: get_logger",
       "<RefCounted#-9223369802096032962>(test_stubber.gd/HackedStubber) should have method: set_logger",
       "Expected [<RefCounted#-9223369802079262768>(logger.gd)] to be anything but NULL:  Default logger not null.",
       "[<RefCounted#-9223369793690655089>(double of logger.gd)] expected to equal [<RefCounted#-9223369793690655089>(double of logger.gd)]:  Set/get works"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_instance_stub_takes_precedence_over_path_stub": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[100] expected to equal [100]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_parameter_stubs_return_different_values": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[10] expected to equal [10]:  With params should give correct value",
       "[5] expected to equal [5]:  Without params should give correct value"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_returns_can_be_layered": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  unstubbed instance method should get class value",
       "[100] expected to equal [100]:  stubbed instance method should get inst value",
       "[0] expected to equal [0]:  stubbed path method should get path value",
       "[<null>] expected to equal [<null>]:  unstubbed path method should get null"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_should_call_super_overriden_by_setting_return": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_should_call_super_returns_false_by_default": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_should_call_super_returns_true_when_stubbed_to_do_so": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_stub_with_nothing_works_with_no_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[5] expected to equal [5]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_inner_class_stubbed_instances_of_other_inner_classes_are_not_stubbed": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<null>] to be NULL:  AnotherInnerA not stubbed",
       "[5] expected to equal [5]:  InnerA is stubbed"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_instances_of_inner_classes_are_stubbed_only_the_stubbed_instance_is_found": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<null>] to be NULL:  AnotherInnerA not stubbed",
       "[\"foo\"] expected to equal [\"foo\"]:  InnerA is stubbed"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_parameters_do_not_match_any_stub_then_warning_generated": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_will_use_instance_instead_of_metadata": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[100] expected to equal [100]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_withStubParams_can_get_return_based_on_complex_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[10] expected to equal [10]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_withStubParams_can_get_return_based_on_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[10] expected to equal [10]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_withStubParams_can_set_return": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[10] expected to equal [10]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_withStubParams_param_layering_works": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[10] expected to equal [10]:  When passed 10 it gets 10",
       "[5] expected to equal [5]:  When passed 5 it gets 5",
       "[\"nothing\"] expected to equal [\"nothing\"]:  When params do not match it sends default back."
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_summary.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 19
    },
    "tests": {
     "test_adding_a_new_script_changes_current": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"script3\"] expected to equal [\"script3\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_adding_bunch_of_names": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<RefCounted#-9223369781342615843>(summary.gd/Test)] to be anything but NULL:  test_can_make_one",
       "Expected [<RefCounted#-9223369781292284198>(summary.gd/Test)] to be anything but NULL:  test_can_parse_a_script",
       "Expected [<RefCounted#-9223369781258729768>(summary.gd/Test)] to be anything but NULL:  test_parsing_same_thing_does_not_add_to_scripts",
       "Expected [<RefCounted#-9223369781225175339>(summary.gd/Test)] to be anything but NULL:  test_parse_returns_script_parser",
       "Expected [<RefCounted#-9223369781191620905>(summary.gd/Test)] to be anything but NULL:  test_parse_returns_cached_version_on_2nd_parse",
       "Expected [<RefCounted#-9223369781158066485>(summary.gd/Test)] to be anything but NULL:  test_can_get_instance_parse_result_from_gdscript",
       "Expected [<RefCounted#-9223369781124512000>(summary.gd/Test)] to be anything but NULL:  test_parsing_more_adds_more_scripts",
       "Expected [<RefCounted#-9223369781090957566>(summary.gd/Test)] to be anything but NULL:  test_can_parse_path_string",
       "Expected [<RefCounted#-9223369781057403132>(summary.gd/Test)] to be anything but NULL:  test_when_passed_an_invalid_path_null_is_returned",
       "Expected [<RefCounted#-9223369781023848698>(summary.gd/Test)] to be anything but NULL:  test_inner_class_sets_subpath",
       "Expected [<RefCounted#-9223369780990294264>(summary.gd/Test)] to be anything but NULL:  test_inner_class_sets_script_path",
       "Expected [<RefCounted#-9223369780956739830>(summary.gd/Test)] to be anything but NULL:  test_can_make_one_from_gdscript",
       "Expected [<RefCounted#-9223369780923185396>(summary.gd/Test)] to be anything but NULL:  test_can_make_one_from_instance",
       "Expected [<RefCounted#-9223369780889630962>(summary.gd/Test)] to be anything but NULL:  test_instance_and_gdscript_have_same_methods",
       "Expected [<RefCounted#-9223369780856076528>(summary.gd/Test)] to be anything but NULL:  test_new_from_gdscript_sets_path",
       "Expected [<RefCounted#-9223369780822522094>(summary.gd/Test)] to be anything but NULL:  test_new_from_inst_sets_path",
       "Expected [<RefCounted#-9223369780788967660>(summary.gd/Test)] to be anything but NULL:  test_can_get_method_by_name",
       "Expected [<RefCounted#-9223369780755413226>(summary.gd/Test)] to be anything but NULL:  test_can_get_super_method_by_name",
       "Expected [<RefCounted#-9223369780721858792>(summary.gd/Test)] to be anything but NULL:  test_non_super_methods_are_not_in_get_super_method_by_name",
       "Expected [<RefCounted#-9223369780688304358>(summary.gd/Test)] to be anything but NULL:  test_can_get_local_method_by_name",
       "Expected [<RefCounted#-9223369780654749924>(summary.gd/Test)] to be anything but NULL:  test_can_super_methods_not_included_in_local_method_by_name",
       "Expected [<RefCounted#-9223369780621195490>(summary.gd/Test)] to be anything but NULL:  test_overloaded_local_methods_are_local",
       "Expected [<RefCounted#-9223369780587641056>(summary.gd/Test)] to be anything but NULL:  test_get_local_method_names_excludes_supers",
       "Expected [<RefCounted#-9223369780554086622>(summary.gd/Test)] to be anything but NULL:  test_get_super_method_names_excludes_locals",
       "Expected [<RefCounted#-9223369780520532188>(summary.gd/Test)] to be anything but NULL:  test_is_blacklisted_returns_true_for_blacklisted_methods",
       "Expected [<RefCounted#-9223369780486977754>(summary.gd/Test)] to be anything but NULL:  test_is_black_listed_returns_false_for_non_blacklisted_methods",
       "Expected [<RefCounted#-9223369780453423320>(summary.gd/Test)] to be anything but NULL:  test_is_black_listed_returns_null_for_methods_that_DNE",
       "Expected [<RefCounted#-9223369780419868886>(summary.gd/Test)] to be anything but NULL:  test_subpath_is_null_by_default",
       "Expected [<RefCounted#-9223369780386314452>(summary.gd/Test)] to be anything but NULL:  test_cannot_set_subpath",
       "Expected [<RefCounted#-9223369780352760018>(summary.gd/Test)] to be anything but NULL:  test_subpath_set_when_passing_inner_and_parent",
       "Expected [<RefCounted#-9223369780319205584>(summary.gd/Test)] to be anything but NULL:  test_subpath_set_for_deeper_inner_classes",
       "Expected [<RefCounted#-9223369780285651150>(summary.gd/Test)] to be anything but NULL:  test_resource_is_loaded_script",
       "Expected [<RefCounted#-9223369780252096716>(summary.gd/Test)] to be anything but NULL:  test_resource_is_loaded_inner",
       "Expected [<RefCounted#-9223369780218542282>(summary.gd/Test)] to be anything but NULL:  test_extends_text_has_path_for_scripts",
       "Expected [<RefCounted#-9223369780184987848>(summary.gd/Test)] to be anything but NULL:  test_extends_text_uses_class_name_for_natives",
       "Expected [<RefCounted#-9223369780151433414>(summary.gd/Test)] to be anything but NULL:  test_extends_text_adds_inner_classes_to_end",
       "Expected [<RefCounted#-9223369780117878980>(summary.gd/Test)] to be anything but NULL:  test_parsing_native_does_not_generate_orphans"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_add_fail": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_add_pass": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_add_pending": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  ",
       "[27] expected to not equal [-1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_add_script": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "no error"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_get_failure_reason": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[26] expected to not equal [-1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_get_scripts": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_check_out_this_summary": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Must be visually checked"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_current_script_returns_the_most_recent_script": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"script2\"] expected to equal [\"script2\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_non_inner_claas_script_count_excludes_inner_classes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_non_inner_claas_script_count_handles_mixed_scripts": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[3] expected to equal [3]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_non_inner_claas_script_count_includes_other_scripts": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_test_text_returns_test_name": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to not equal [-1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_test_that_do_not_assert_are_not_failing": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_test_that_do_not_assert_are_not_pending": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_test_that_do_not_assert_are_risky": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_test_that_do_not_assert_do_not_count_as_passing": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  pass count"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_tests_that_do_not_assert_count_as_tests": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  test count"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/unit/test_test.gd.TestAccessorAsserts": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 6
    },
    "tests": {
     "test_fail_if_default_wrong": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Bad FAIL COUNT:  ",
       "[3] expected to equal [3]:  Bad PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fail_if_default_wrong_and_get_dont_work": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  Bad FAIL COUNT:  ",
       "[2] expected to equal [2]:  Bad PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fail_if_get_set_not_defined": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fail_if_has_get_and_not_set": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Bad FAIL COUNT:  ",
       "[1] expected to equal [1]:  Bad PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_finds_getters_that_start_with_is": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[4] expected to equal [4]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_pass_if_all_get_sets_are_aligned": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[4] expected to equal [4]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertAlmostEq": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 16
    },
    "tests": {
     "test_fails_with_floats_outside_range": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_with_integers_outside_range": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_with_vector2s_ne": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_with_vector2s_y_ne": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_with_vector2s_y_outside_range": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_with_vector3s_y_z_ne": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_with_vector3s_z_ne": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_with_vector3s_z_outside_range": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_float_within_integer_range": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_floats_within_range": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[3] expected to equal [3]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_integers_almost_within_range": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_integers_equal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_integers_within_float_range": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_vector2s_almost_eq": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_vector2s_eq": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_vector3s_y_z_within_range": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertAlmostNe": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 16
    },
    "tests": {
     "test_fails_with_floats_eq": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_with_floats_within_range": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_with_integers_equal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_with_integers_within_range": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_with_vector2s_eq": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_with_vector3s_y_z_within_range": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_pass_with_integers_not_equal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_floats_outside_range": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_integers_outside_range": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_vector2s_almost_outside_range": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_vector2s_outside_range": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_vector2s_y_ne": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_vector2s_y_outside_range": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_vector3s_y_z_ne": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_vector3s_z_ne": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_vector3s_z_outside_range": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertBackedProperty": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 4
    },
    "tests": {
     "test_all_pass_when_everything_is_setup_right": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[7] expected to equal [7]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_when_getter_does_not_return_backing_var": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Bad FAIL COUNT:  ",
       "[6] expected to equal [6]:  Bad PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_when_setter_does_not_set_backing_var": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  Bad FAIL COUNT:  ",
       "[5] expected to equal [5]:  Bad PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_has_method": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "<Node#2762418965938>(test.gd) should have method: assert_property_with_backing_variable"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertBetween": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 12
    },
    "tests": {
     "test_between_with_invalid_number_range": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  8 is starting number and is not less than 0"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_between_with_invalid_string_range": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_between_with_number_at_high_end": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  3 is between 1 and 3"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_between_with_number_at_low_end": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  1 between 1 and 3"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_between_with_number_between": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  Should pass, 2 between 1 and 3"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_between_with_number_gt": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  4 not between 1 and 3"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_between_with_number_lt": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  0 not between 1 and 3"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_between_with_string_at_high_end": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_between_with_string_at_low_end": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_between_with_string_between": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_between_with_string_gt": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_between_with_string_lt": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertCallCount": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 6
    },
    "tests": {
     "test_fails_if_object_is_not_a_double": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_if_parameters_do_not_match": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_when_count_does_not_match": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_it_passes_if_parameters_do_match": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_when_nothing_called_and_expected_count_zero": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_parameters_not_sent_all_calls_count": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertCalled": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 6
    },
    "tests": {
     "test_assert_called_fails_with_message_if_non_doubled_passed": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_assert_called_generates_error_if_third_parameter_not_an_array": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  ",
       "[1] expected to equal [1]:  Generates error"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_assert_called_passes_when_call_occurred": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_assert_called_passes_with_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_assert_called_works_with_defaults": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_when_parameters_do_not_match": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertEq": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 12
    },
    "tests": {
     "test_dictionary_are_compared_by_value": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_when_comparing_float_cast_as_int": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_when_float_eq_fail": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_when_number_not_equal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  Should fail.  1 != 2"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_when_string_not_equal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_when_cast_int_expression_to_float": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_when_float_eq": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_when_integer_equal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_when_string_equal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_warns_when_comparing_float_and_int": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Should have 1 warnings."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_with_array": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  ",
       "[1] expected to equal [1]:  Expected PASS COUNT:  ",
       "[1] expected to equal [1]:  Expected FAIL COUNT:  ",
       "[1] expected to equal [1]:  Expected FAIL COUNT:  ",
       "[1] expected to equal [1]:  Expected FAIL COUNT:  ",
       "[1] expected to equal [1]:  Expected PASS COUNT:  ",
       "[1] expected to equal [1]:  Expected FAIL COUNT:  ",
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_with_dictionary_references": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertExports": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/unit/test_test.gd.TestAssertFalse": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 4
    },
    "tests": {
     "test_fails_with_non_bools": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_with_true": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_false": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_text_is_optional": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertFileDne": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 2
    },
    "tests": {
     "test__assert_file_dne__with_file_dne": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_file_dne__with_file_exists": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertFileEmpty": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 3
    },
    "tests": {
     "test__assert_file_empty__fails_when_file_dne": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_file_empty__with_empty_file": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_file_empty__with_not_empty_file": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertFileExists": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 2
    },
    "tests": {
     "test__assert_file_exists__with_file_dne": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_file_exists__with_file_exists": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertFileNotEmpty": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 3
    },
    "tests": {
     "test__assert_file_not_empty__fails_when_file_dne": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_file_not_empty__with_empty_file": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_file_not_empty__with_populated_file": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertGt": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 4
    },
    "tests": {
     "test_fails_with_less_than_integer": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  1 < 2"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_with_less_than_string": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_greater_integer": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  2 > 1"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_greater_string": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertHas": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 4
    },
    "tests": {
     "test_assert_not_have_fails_when_in_there": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_assert_not_have_passes_when_not_in_there": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_when_it_does_not_have_element": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_when_array_has_element": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertHasMethod": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 2
    },
    "tests": {
     "test_fail_if_is_lacking_method": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_pass_if_has_correct_method": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertIsFreed": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 5
    },
    "tests": {
     "test_object_is_freed_should_fail": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_object_is_freed_should_pass": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_object_is_not_freed_should_fail": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_object_is_not_freed_should_pass": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_queued_free_is_not_freed": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertLt": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 4
    },
    "tests": {
     "test_number_with_gt": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  2 > 1"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_number_with_lt": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  1 < 2"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_string_with_gt": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_string_with_lt": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertNe": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 8
    },
    "tests": {
     "test_dictionary_are_compared_by_value": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_with_integers_equal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  1 = 1"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_with_strings_equal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_floats_not_equal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_integers_not_equal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_strings_not_equal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_with_array": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  ",
       "[1] expected to equal [1]:  Expected FAIL COUNT:  ",
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_with_dictionary_references": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertNotBetween": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 11
    },
    "tests": {
     "test_with_invalid_number_range": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  8 is starting number and is not less than 0"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_with_invalid_string_range": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_with_number_at_high_end": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  3 not between 1 and 3, exclusively"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_with_number_at_low_end": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  1 not between 1 and 3, exclusively"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_with_number_gt": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  4 not between 1 and 3"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_with_number_lt": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_with_string_at_high_end": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_with_string_at_low_end": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_with_string_between": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_with_string_gt": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_with_string_lt": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertNotCalled": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 6
    },
    "tests": {
     "test_fails_if_no_params_specified_and_a_call_was_made": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_if_parameters_do_match": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_when_a_call_has_been_made": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_when_passed_a_non_doubled_instance": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_if_parameters_do_not_match": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_when_no_calls_have_been_made": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertNotNull": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 4
    },
    "tests": {
     "test_accepts_text": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_does_not_blow_up_on_different_kinds_of_input": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[5] expected to equal [5]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_not_null_assert_passes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_null_assert_fails": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertNull": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 4
    },
    "tests": {
     "test_accepts_text": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_does_not_blow_up_on_different_kinds_of_input": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[5] expected to equal [5]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_not_null_assert_fails": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_null_assert_passes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertProperty": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 9
    },
    "tests": {
     "test_fails_if_getter_does_not_exist": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Bad FAIL COUNT:  ",
       "[1] expected to equal [1]:  Bad PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_if_obj_is_something_unexpected": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Bad FAIL COUNT:  ",
       "[0] expected to equal [0]:  Bad PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_has_assert_property": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "<Node#2749735390387>(test.gd) should have method: assert_property"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_other_fails_do_not_cause_false_negative": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Bad FAIL COUNT:  ",
       "[4] expected to equal [4]:  Bad PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_if_given_input_is_valid": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[4] expected to equal [4]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_if_instance_is_obj_from_packed_scene": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[4] expected to equal [4]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_if_instance_is_obj_from_script": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[4] expected to equal [4]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_if_instance_is_packed_scene": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[4] expected to equal [4]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_if_instance_is_script": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[4] expected to equal [4]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertSameAndAssertNotSame": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 4
    },
    "tests": {
     "test_assert_not_same_fails_when_values_are_not_the_same": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  ",
       "[1] expected to equal [1]:  Expected PASS COUNT:  ",
       "[1] expected to equal [1]:  Expected PASS COUNT:  ",
       "[1] expected to equal [1]:  Expected PASS COUNT:  ",
       "[1] expected to equal [1]:  Expected PASS COUNT:  ",
       "[1] expected to equal [1]:  Expected PASS COUNT:  ",
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_assert_not_same_fails_when_values_are_same": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  ",
       "[1] expected to equal [1]:  Expected FAIL COUNT:  ",
       "[1] expected to equal [1]:  Expected FAIL COUNT:  ",
       "[1] expected to equal [1]:  Expected FAIL COUNT:  ",
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_assert_same_fails_when_values_are_not_the_same": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  ",
       "[1] expected to equal [1]:  Expected FAIL COUNT:  ",
       "[1] expected to equal [1]:  Expected FAIL COUNT:  ",
       "[1] expected to equal [1]:  Expected FAIL COUNT:  ",
       "[1] expected to equal [1]:  Expected FAIL COUNT:  ",
       "[1] expected to equal [1]:  Expected FAIL COUNT:  ",
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_assert_same_passes_when_values_are_same": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  ",
       "[1] expected to equal [1]:  Expected PASS COUNT:  ",
       "[1] expected to equal [1]:  Expected PASS COUNT:  ",
       "[1] expected to equal [1]:  Expected PASS COUNT:  ",
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertTrue": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 4
    },
    "tests": {
     "test_fails_with_false": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_with_non_bools": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_true": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_text_is_optional": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestAssertTypeOf": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 4
    },
    "tests": {
     "test_fails_when_it_is_not": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_not_fails_when_object_is_of_type": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_not_passes_when_it_is_not": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_when_object_is_of_type": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestCompareDeepShallow": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 9
    },
    "tests": {
     "test_assert_eq_deep_fails_with_different": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_assert_eq_deep_pass_with_same": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_assert_ne_deep_fails_with_same": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_assert_ne_deep_passes_with_different": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_assert_ne_shallow_fails_due_to_removed": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_assert_shallow_fails_due_to_removed": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_compare_deep_sets_max_differences": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[10] expected to equal [10]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_compare_deep_uses_compare": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [deep] to have been called on <RefCounted#-9223369298477560425>(double of comparator.gd)"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_compare_shallow_results_in_fail_and_warning": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestConnectionAsserts": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 8
    },
    "tests": {
     "test_when_target_connected_to_source_connected_passes_with_method_name": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_target_connected_to_source_connected_passes_without_method_name": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_target_connected_to_source_not_connected_fails_with_method_name": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_target_connected_to_source_not_connected_fails_without_method_name": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_target_not_connected_to_source_connected_fails_with_method_name": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_target_not_connected_to_source_connected_fails_without_method_name": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_target_not_connected_to_source_not_connected_passes_with_method_name": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_target_not_connected_to_source_not_connected_passes_without_method_name": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestExtendAsserts": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 10
    },
    "tests": {
     "test_assrt_is_does_not_free_references": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_when_class_does_not_extend_parent": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_when_class_names_match_but_inheritance_does_not": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_when_class_names_match_but_inheritance_does_not__with_class": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  Fails in 3.1, bug has been created."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_when_compareing_object_to_primitives": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_with_another_instance": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_fails_with_primitves_and_classes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_when_class_extends_parent": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_deeper_inheritance": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_works_with_resources": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestFailingDatatypeChecks": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 6
    },
    "tests": {
     "test_dt_can_compare_to_null": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_dt_string_number_assert_gt": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_dt_string_number_eq": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_dt_string_number_func_assert_between": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_dt_string_number_func_assert_lt": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_dt_string_number_ne": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestGetCallCount": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 2
    },
    "tests": {
     "test_it_works": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[10] expected to equal [10]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_it_works_with_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[3] expected to equal [3]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestGetCallParameters": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 2
    },
    "tests": {
     "test_generates_error_if_you_do_not_pass_a_doubled_object": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_it_works": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([5]) == Array([5])  ",
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestMemoryMgmt": {
    "props": {
     "failures": 1,
     "pending": 0,
     "tests": 7
    },
    "tests": {
     "test_autofree_children": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[@@1195:<Node#2691199683696>(test_test.gd/TestMemoryMgmt)] expected to equal [@@1195:<Node#2691199683696>(test_test.gd/TestMemoryMgmt)]:  added as child",
       "Expected [node] to be freed",
       "No new orphans found."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_autoqfree_children": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[@@1195:<Node#2691199683696>(test_test.gd/TestMemoryMgmt)] expected to equal [@@1195:<Node#2691199683696>(test_test.gd/TestMemoryMgmt)]:  added as child",
       "Expected [@@1197:<Node#2692004990061>node] to not be freed",
       "Expected [node] to be freed",
       "No new orphans found."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_children_warning": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Check for warning"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_failing_orphan_assert_marks_test_as_failing": {
      "failing": [
       "Expected no orphans, but found 1:  this should fail\n      at line 1684"
      ],
      "orphans": 0,
      "passing": [
       "test should be failing"
      ],
      "pending": [

      ],
      "status": "fail"
     },
     "test_passes_when_no_orphans_introduced": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "No new orphans found.",
       "test should be passing"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_when_orphans_released": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "No new orphans found.",
       "this should be passing"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_passes_with_queue_free": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "No new orphans found.",
       "this should be passing"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestMiscTests": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 2
    },
    "tests": {
     "test_get_set_logger": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<RefCounted#-9223369778154944666>(logger.gd)] expected to not equal [<null>]:  ",
       "[<RefCounted#-9223369768759703573>(double of logger.gd)] expected to equal [<RefCounted#-9223369768759703573>(double of logger.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_script_object_added_to_tree": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestParameterizedTests": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 5
    },
    "tests": {
     "test_first_call_to_use_parameters_returns_first_index_of_params": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_prameter_handler_has_logger_set_to_guts_logger": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<RefCounted#-9223369352114320427>(logger.gd)] expected to equal [<RefCounted#-9223369352114320427>(logger.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_gut_already_has_parameter_handler_it_does_not_make_a_new_one": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[<RefCounted#-9223369349882950761>(parameter_handler.gd)] expected to equal [<RefCounted#-9223369349882950761>(parameter_handler.gd)]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_parameterized_test_does_not_assert_a_warning_is_generated": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "passing"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_use_parameters_is_called_it_populates_guts_parameter_handler": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<RefCounted#-9223369352617637021>(parameter_handler.gd)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestPassFailTestMethods": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 2
    },
    "tests": {
     "test_fail_test_ups_fail_count": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  test count"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_pass_test_passes_ups_pass_count": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  test count"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestPending": {
    "props": {
     "failures": 0,
     "pending": 1,
     "tests": 3
    },
    "tests": {
     "test_pending_accepts_text": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [
       "This is a pending test.  You should see this text in the results."
      ],
      "status": "pending"
     },
     "test_pending_does_not_increment_passed": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_pending_increments_pending_count": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  One test should have been marked as pending"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestReplaceNode": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 8
    },
    "tests": {
     "test_can_replace_node": {
      "failing": [

      ],
      "orphans": 3,
      "passing": [
       "[Sword:<Node2D#2653450947545>] expected to equal [Sword:<Node2D#2653450947545>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_generates_error_if_base_node_does_not_have_node_to_replace": {
      "failing": [

      ],
      "orphans": 3,
      "passing": [
       "[1] expected to equal [1]:  Should have 1 errors."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_replaced_node_is_freed": {
      "failing": [

      ],
      "orphans": -4,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_replaced_node_retains_groups": {
      "failing": [

      ],
      "orphans": 3,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_replacement_works_with_dollar_sign_references": {
      "failing": [

      ],
      "orphans": 3,
      "passing": [
       "[Player1:<Node2D#2656252742630>] expected to equal [Player1:<Node2D#2656252742630>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_replacement_works_with_dollar_sign_references_2": {
      "failing": [

      ],
      "orphans": 3,
      "passing": [
       "[Sword:<Node2D#2657628474259>] expected to equal [Sword:<Node2D#2657628474259>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_node_does_not_exist_error_is_generated": {
      "failing": [

      ],
      "orphans": 3,
      "passing": [
       "[1] expected to equal [1]:  Should have 1 errors."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_works_with_node_and_not_path": {
      "failing": [

      ],
      "orphans": 3,
      "passing": [
       "[Sword:<Node2D#2661839555664>] expected to equal [Sword:<Node2D#2661839555664>]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestSignalAsserts": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 29
    },
    "tests": {
     "test__assert_has_signal__fails_when_it_does_not_have_the_signal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_has_signal__passes_when_it_has_the_signal": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_has_signal__works_with_script_signals": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_signal_emitted__passes_with_script_signals": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_signal_emitted_with_parameters__can_check_multiple_emission": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_signal_emitted_with_parameters__fails_when_not_all_parameters_match": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_signal_emitted_with_parameters__fails_when_object_not_watched": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_signal_emitted_with_parameters__fails_when_parameters_dont_match": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_signal_emitted_with_parameters__fails_when_signal_not_emitted": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_signal_emitted_with_parameters__passes_when_all_parameters_match": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_signal_emitted_with_parameters__passes_when_parameters_match": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__get_signal_emit_count__returns_neg_1_when_not_watched": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[-1] expected to equal [-1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__with_parameters_errors_when_parameters_are_not_an_array": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Should have 1 errors.",
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_get_signal_emit_counts": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_get_signal_parameters": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Array([1, 2, 3]) == Array([1, 2, 3])  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_issue_152": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_object_does_not_have_signal__assert_signal_emit_count__fails": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_object_does_not_have_signal__assert_signal_emitted__fails": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  Only the failure that it does not have signal should fire."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_object_does_not_have_signal__assert_signal_not_emitted__fails": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  Only the failure that it does not have signal should fire."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_object_not_being_watched__assert_signal_emitted__fails": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_signal_count_fails_then_emitted_signals_are_listed": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected 'failed:  Expected the signal [script_signal] emit count of [1] to equal [2]:  (Signals emitted: [\"script_signal\", \"no_parameters\", \"some_signal\"])' to contain 'no_parameters', match_case=true",
       "Expected 'failed:  Expected the signal [script_signal] emit count of [1] to equal [2]:  (Signals emitted: [\"script_signal\", \"no_parameters\", \"some_signal\"])' to contain 'some_signal', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_signal_emit_with_parameters_fails_because_signal_was_not_emitted_then_signals_are_listed": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected 'failed:  Object <RefCounted#-9223369557215786429> did not emit signal [script_signal] (Signals emitted: [\"no_parameters\", \"some_signal\"])' to contain 'no_parameters', match_case=true",
       "Expected 'failed:  Object <RefCounted#-9223369557215786429> did not emit signal [script_signal] (Signals emitted: [\"no_parameters\", \"some_signal\"])' to contain 'some_signal', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_signal_emitted__assert_signal_emitted__passes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_signal_emitted__assert_signal_not_emitted__fails": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_signal_emitted_fails_emitted_signals_are_listed": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected 'failed:  Expected object <RefCounted#-9223369548944618916>(test_test.gd/TestSignalAsserts/SignalObject) to have emitted signal [script_signal]:   (Signals emitted: [\"no_parameters\", \"some_signal\"])' to contain 'no_parameters', match_case=true",
       "Expected 'failed:  Expected object <RefCounted#-9223369548944618916>(test_test.gd/TestSignalAsserts/SignalObject) to have emitted signal [script_signal]:   (Signals emitted: [\"no_parameters\", \"some_signal\"])' to contain 'some_signal', match_case=true"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_signal_emitted_once__assert_signal_emit_count__passes_with_1": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_signal_emitted_twice__assert_signal_emit_count__fails_with_1": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_signal_not_emitted__assert_signal_emitted__fails": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_when_signal_not_emitted__assert_signal_not_emitted__fails": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestStringContains": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 6
    },
    "tests": {
     "test__assert_string_contains__fails_when_case_insensitive_search_not_found": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_string_contains__fails_when_case_sensitive_search_not_found": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_string_contains__fails_when_search_string_is_empty": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_string_contains__fails_when_text_is_empty": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_string_contains__passes_when_case_insensitive_search_is_found": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_string_contains__passes_when_case_sensitive_search_is_found": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestStringEndsWith": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 6
    },
    "tests": {
     "test__assert_string_ends_with__fails_when_case_insensitive_search_not_at_end": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_string_ends_with__fails_when_case_sensitive_search_not_at_end": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_string_ends_with__fails_when_search_string_is_empty": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_string_ends_with__fails_when_text_is_empty": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_string_ends_with__passes_when_case_insensitive_search_at_end": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_string_ends_with__passes_when_case_sensitive_search_at_end": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestStringStartsWith": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 6
    },
    "tests": {
     "test__assert_string_starts_with__fails_when_case_insensitive_search_not_at_start": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_string_starts_with__fails_when_case_sensitive_search_not_at_start": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_string_starts_with__fails_when_search_string_is_empty": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_string_starts_with__fails_when_text_is_empty": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected FAIL COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_string_starts_with__passes_when_case_insensitive_search_at_start": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test__assert_string_starts_with__passes_when_case_sensitive_search_at_start": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Expected PASS COUNT:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test.gd.TestTestStateChecking": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 12
    },
    "tests": {
     "test_error_generated_when_using_is_failing_in_after_all": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_error_generated_when_using_is_failing_in_before_all": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_error_generated_when_using_is_passing_in_after_all": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_error_generated_when_using_is_passing_in_before_all": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_failing_returns_false_before_test_passes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  Pass count does not match",
       "[0] expected to equal [0]:  Failing count does not match"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_failing_returns_false_by_default": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Pass count does not match",
       "[0] expected to equal [0]:  Failing count does not match"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_failing_returns_false_when_passing": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  Pass count does not match",
       "[0] expected to equal [0]:  Failing count does not match"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_failing_returns_true_when_failing": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Pass count does not match",
       "[1] expected to equal [1]:  Failing count does not match"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_passing_false_by_default": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Pass count does not match",
       "[0] expected to equal [0]:  Failing count does not match"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_passing_returns_false_when_test_is_failing": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  Pass count does not match",
       "[1] expected to equal [1]:  Failing count does not match"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_passing_returns_true_before_test_fails": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  Pass count does not match",
       "[1] expected to equal [1]:  Failing count does not match"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_passing_returns_true_when_test_is_passing": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  Pass count does not match",
       "[0] expected to equal [0]:  Failing count does not match"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test_await_methods.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/unit/test_test_await_methods.gd.TestOldYieldMethods": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 4
    },
    "tests": {
     "test_wait_for_waits_for_x_seconds": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0.5] expected to be between [0.49] and [0.52]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_wait_frames_waits_for_x_frames": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[29] expected to be between [29] and [31]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_wait_to_ends_at_max_wait_if_signal_not_emitted": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0.98333333333333] expected to be between [0.9] and [1.1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_wait_to_ends_when_signal_emitted": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0.5] expected to be between [0.49] and [0.52]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test_await_methods.gd.TestTheNewWaitMethods": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 4
    },
    "tests": {
     "test_wait_for_waits_for_x_seconds": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0.5] expected to be between [0.49] and [0.52]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_wait_frames_waits_for_x_frames": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[29] expected to be between [29] and [31]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_wait_to_ends_at_max_wait_if_signal_not_emitted": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0.98333333333333] expected to be between [0.9] and [1.1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_wait_to_ends_when_signal_emitted": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[0.51666666666667] expected to be between [0.49] and [0.52]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test_collector.gd": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/unit/test_test_collector.gd.TestExportImport": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 0
    },
    "tests": {

    }
   },
   "res://test/unit/test_test_collector.gd.TestTestCollector": {
    "props": {
     "failures": 0,
     "pending": 1,
     "tests": 12
    },
    "tests": {
     "test_can_change_test_class_prefix": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "shold have DifferentPrefixClass"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_can_change_test_prefix": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"diff_prefix_something\"] expected to equal [\"diff_prefix_something\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_does_not_have_not_prefixed": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[\"test_one\"] expected to not equal [\"not_prefixed\"]:  ",
       "[\"test_two\"] expected to not equal [\"not_prefixed\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_finds_inner_classes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "should have res://test/resources/parsing_and_loading_samples/has_inner_class.gd.TestClass1",
       "should not have res://test/resources/parsing_and_loading_samples/has_inner_class.gd.DifferentPrefixClass",
       "should have res://test/resources/parsing_and_loading_samples/has_inner_class.gd.TestExtendsTestClass1",
       "[3] expected to equal [3]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_set_test_class_prefix": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "<RefCounted#-9223369232677319087>(test_collector.gd) should have getter starting with get_ or is_",
       "<RefCounted#-9223369232677319087>(test_collector.gd) should have method: set_test_class_prefix",
       "[\"Test\"] expected to equal [\"Test\"]:  It should have the expected default value.",
       "[\"Something\"] expected to equal [\"Something\"]:  The set value should have been returned."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_set_test_prefix": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "<RefCounted#-9223369233063195063>(test_collector.gd) should have getter starting with get_ or is_",
       "<RefCounted#-9223369233063195063>(test_collector.gd) should have method: set_test_prefix",
       "[\"test_\"] expected to equal [\"test_\"]:  It should have the expected default value.",
       "[\"something\"] expected to equal [\"something\"]:  The set value should have been returned."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_has_logger": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [
       "pending in 4.0"
      ],
      "status": "pending"
     },
     "test_has_test_one": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<RefCounted#-9223369233381962183>(test_collector.gd/Test)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_ignores_classes_that_match_but_do_not_extend_test": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "should not have DoesNotExtend",
       "[1] expected to equal [1]:  Should have 1 warnings."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_inner_classes_have_tests": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[2] expected to equal [2]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_inner_tests_are_found_using_test_prefix": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_inner_tests_must_extend_test_to_be_used": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[TYPE_STRING_NAME()] expected to not equal [\"TestDoesNotExtendTest\"]:  ",
       "[TYPE_STRING_NAME(TestClass1)] expected to not equal [\"TestDoesNotExtendTest\"]:  ",
       "[TYPE_STRING_NAME(TestExtendsTestClass1)] expected to not equal [\"TestDoesNotExtendTest\"]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_test_collector.gd.TestTestsWithParameters": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 2
    },
    "tests": {
     "test_populates_arg_count_for_inner_classes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  ",
       "[2] expected to equal [2]:  ",
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_populates_arg_count_for_script": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[1] expected to equal [1]:  ",
       "[2] expected to equal [2]:  ",
       "[0] expected to equal [0]:  "
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   },
   "res://test/unit/test_utils.gd": {
    "props": {
     "failures": 0,
     "pending": 1,
     "tests": 15
    },
    "tests": {
     "test_can_make_one": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "Expected [<Node#2807818112700>(utils.gd)] to be anything but NULL:  "
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_native_class_name_does_not_free_references": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "we got here"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_get_native_class_name_does_not_generate_orphans": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "No new orphans found."
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_double_returns_false_for_non_doubles": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_double_returns_false_for_primitives": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "string",
       "int",
       "float",
       "array",
       "dictionary"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_double_returns_true_for_doubles": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_double_works_with_classes_that_overload_get": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_inner_class_false_for_base_scripts": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_inner_class_false_for_non_objs": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_inner_class_true_for_inner_classes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_instance_false_for_classes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_instance_false_for_instanced_things": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_instance_true_for_new": {
      "failing": [

      ],
      "orphans": 1,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_native_class_returns_true_for_native_classes": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       ""
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_latest_version_if_version_is_old_warning_is_on": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [

      ],
      "pending": [
       "http_request node does not exist?"
      ],
      "status": "pending"
     }
    }
   },
   "res://test/unit/test_utils.gd.TestVersionCheck": {
    "props": {
     "failures": 0,
     "pending": 0,
     "tests": 2
    },
    "tests": {
     "test_is_godot_version": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[true] expected to equal [true]:  1.2.3 is 1.2.3",
       "[true] expected to equal [true]:  1.2.3 is 1.2",
       "[true] expected to equal [true]:  1.2.3 is 1",
       "[false] expected to equal [false]:  1.2.4 is 1.2.3",
       "[false] expected to equal [false]:  1.3.3 is 1.2.3",
       "[false] expected to equal [false]:  2.2.3 is 1.2.3",
       "[false] expected to equal [false]:  1.2.3 is 1.2.3.4"
      ],
      "pending": [

      ],
      "status": "pass"
     },
     "test_is_version_ok": {
      "failing": [

      ],
      "orphans": 0,
      "passing": [
       "[true] expected to equal [true]:  1.2.3 >= 1.2.3",
       "[true] expected to equal [true]:  2.0.0 >= 1.0.0",
       "[true] expected to equal [true]:  1.0.1 >= 1.0.0",
       "[true] expected to equal [true]:  1.1.0 >= 1.0.0",
       "[true] expected to equal [true]:  1.1.1 >= 1.0.0",
       "[true] expected to equal [true]:  1.2.5 >= 1.0.10",
       "[true] expected to equal [true]:  3.3.0 >= 3.2.3",
       "[true] expected to equal [true]:  4.0.0 >= 3.2.0",
       "[false] expected to equal [false]:  3.0.0 >= 3.0.1",
       "[false] expected to equal [false]:  1.2.3 >= 2.0.0",
       "[false] expected to equal [false]:  1.2.1 >= 1.2.3",
       "[false] expected to equal [false]:  1.2.3 >= 1.3.0"
      ],
      "pending": [

      ],
      "status": "pass"
     }
    }
   }
  }
 }
}